
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002188  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08002248  08002248  00012248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800227c  0800227c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800227c  0800227c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800227c  0800227c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800227c  0800227c  0001227c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002280  08002280  00012280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002284  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  08002288  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20000028  08002288  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006925  00000000  00000000  0002006f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cc2  00000000  00000000  00026994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000878  00000000  00000000  00028658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000621  00000000  00000000  00028ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000d181  00000000  00000000  000294f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000846d  00000000  00000000  00036672  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0004318d  00000000  00000000  0003eadf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001ba4  00000000  00000000  00081c6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00083810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002230 	.word	0x08002230

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08002230 	.word	0x08002230

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	2201      	movs	r2, #1
 800022e:	431a      	orrs	r2, r3
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	601a      	str	r2, [r3, #0]
}
 8000234:	46c0      	nop			; (mov r8, r8)
 8000236:	46bd      	mov	sp, r7
 8000238:	b002      	add	sp, #8
 800023a:	bd80      	pop	{r7, pc}

0800023c <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	68db      	ldr	r3, [r3, #12]
 8000248:	2201      	movs	r2, #1
 800024a:	431a      	orrs	r2, r3
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	60da      	str	r2, [r3, #12]
}
 8000250:	46c0      	nop			; (mov r8, r8)
 8000252:	46bd      	mov	sp, r7
 8000254:	b002      	add	sp, #8
 8000256:	bd80      	pop	{r7, pc}

08000258 <TimeBaseStartIT>:
 *      Author: Antoine
 */

#include "tim.h"

void TimeBaseStartIT(void){
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	LL_TIM_EnableCounter(TIM21);
 800025c:	4b05      	ldr	r3, [pc, #20]	; (8000274 <TimeBaseStartIT+0x1c>)
 800025e:	0018      	movs	r0, r3
 8000260:	f7ff ffde 	bl	8000220 <LL_TIM_EnableCounter>
	LL_TIM_EnableIT_UPDATE(TIM21);
 8000264:	4b03      	ldr	r3, [pc, #12]	; (8000274 <TimeBaseStartIT+0x1c>)
 8000266:	0018      	movs	r0, r3
 8000268:	f7ff ffe8 	bl	800023c <LL_TIM_EnableIT_UPDATE>
}
 800026c:	46c0      	nop			; (mov r8, r8)
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
 8000272:	46c0      	nop			; (mov r8, r8)
 8000274:	40010800 	.word	0x40010800

08000278 <LL_ADC_SetCommonFrequencyMode>:
  *         @arg @ref LL_ADC_CLOCK_FREQ_MODE_HIGH
  *         @arg @ref LL_ADC_CLOCK_FREQ_MODE_LOW
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonFrequencyMode(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonFrequencyMode)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
 8000280:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_LFMEN, CommonFrequencyMode);
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	4a05      	ldr	r2, [pc, #20]	; (800029c <LL_ADC_SetCommonFrequencyMode+0x24>)
 8000288:	401a      	ands	r2, r3
 800028a:	683b      	ldr	r3, [r7, #0]
 800028c:	431a      	orrs	r2, r3
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	601a      	str	r2, [r3, #0]
}
 8000292:	46c0      	nop			; (mov r8, r8)
 8000294:	46bd      	mov	sp, r7
 8000296:	b002      	add	sp, #8
 8000298:	bd80      	pop	{r7, pc}
 800029a:	46c0      	nop			; (mov r8, r8)
 800029c:	fdffffff 	.word	0xfdffffff

080002a0 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTime)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	695b      	ldr	r3, [r3, #20]
 80002ae:	2207      	movs	r2, #7
 80002b0:	4393      	bics	r3, r2
 80002b2:	001a      	movs	r2, r3
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	431a      	orrs	r2, r3
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	615a      	str	r2, [r3, #20]
}
 80002bc:	46c0      	nop			; (mov r8, r8)
 80002be:	46bd      	mov	sp, r7
 80002c0:	b002      	add	sp, #8
 80002c2:	bd80      	pop	{r7, pc}

080002c4 <LL_ADC_REG_SetSequencerScanDirection>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_FORWARD
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerScanDirection(ADC_TypeDef *ADCx, uint32_t ScanDirection)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	68db      	ldr	r3, [r3, #12]
 80002d2:	2204      	movs	r2, #4
 80002d4:	4393      	bics	r3, r2
 80002d6:	001a      	movs	r2, r3
 80002d8:	683b      	ldr	r3, [r7, #0]
 80002da:	431a      	orrs	r2, r3
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	60da      	str	r2, [r3, #12]
}
 80002e0:	46c0      	nop			; (mov r8, r8)
 80002e2:	46bd      	mov	sp, r7
 80002e4:	b002      	add	sp, #8
 80002e6:	bd80      	pop	{r7, pc}

080002e8 <LL_ADC_REG_SetSequencerChAdd>:
  *
  *         (1) On STM32L0, parameter not available on all devices: only on STM32L053xx, STM32L063xx, STM32L073xx, STM32L083xx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
 80002f0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	035b      	lsls	r3, r3, #13
 80002fa:	0b5b      	lsrs	r3, r3, #13
 80002fc:	431a      	orrs	r2, r3
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000302:	46c0      	nop			; (mov r8, r8)
 8000304:	46bd      	mov	sp, r7
 8000306:	b002      	add	sp, #8
 8000308:	bd80      	pop	{r7, pc}

0800030a <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_DISABLE
  *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 800030a:	b580      	push	{r7, lr}
 800030c:	b082      	sub	sp, #8
 800030e:	af00      	add	r7, sp, #0
 8000310:	6078      	str	r0, [r7, #4]
 8000312:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	691b      	ldr	r3, [r3, #16]
 8000318:	2201      	movs	r2, #1
 800031a:	4393      	bics	r3, r2
 800031c:	001a      	movs	r2, r3
 800031e:	683b      	ldr	r3, [r7, #0]
 8000320:	431a      	orrs	r2, r3
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	611a      	str	r2, [r3, #16]
}
 8000326:	46c0      	nop			; (mov r8, r8)
 8000328:	46bd      	mov	sp, r7
 800032a:	b002      	add	sp, #8
 800032c:	bd80      	pop	{r7, pc}
	...

08000330 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	689b      	ldr	r3, [r3, #8]
 800033c:	4a05      	ldr	r2, [pc, #20]	; (8000354 <LL_ADC_EnableInternalRegulator+0x24>)
 800033e:	4013      	ands	r3, r2
 8000340:	2280      	movs	r2, #128	; 0x80
 8000342:	0552      	lsls	r2, r2, #21
 8000344:	431a      	orrs	r2, r3
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800034a:	46c0      	nop			; (mov r8, r8)
 800034c:	46bd      	mov	sp, r7
 800034e:	b002      	add	sp, #8
 8000350:	bd80      	pop	{r7, pc}
 8000352:	46c0      	nop			; (mov r8, r8)
 8000354:	6fffffe8 	.word	0x6fffffe8

08000358 <LL_ADC_DisableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	685b      	ldr	r3, [r3, #4]
 8000364:	2204      	movs	r2, #4
 8000366:	4393      	bics	r3, r2
 8000368:	001a      	movs	r2, r3
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	605a      	str	r2, [r3, #4]
}
 800036e:	46c0      	nop			; (mov r8, r8)
 8000370:	46bd      	mov	sp, r7
 8000372:	b002      	add	sp, #8
 8000374:	bd80      	pop	{r7, pc}

08000376 <LL_ADC_DisableIT_EOS>:
  * @rmtoll IER      EOSEQIE        LL_ADC_DisableIT_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
 8000376:	b580      	push	{r7, lr}
 8000378:	b082      	sub	sp, #8
 800037a:	af00      	add	r7, sp, #0
 800037c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	685b      	ldr	r3, [r3, #4]
 8000382:	2208      	movs	r2, #8
 8000384:	4393      	bics	r3, r2
 8000386:	001a      	movs	r2, r3
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	605a      	str	r2, [r3, #4]
}
 800038c:	46c0      	nop			; (mov r8, r8)
 800038e:	46bd      	mov	sp, r7
 8000390:	b002      	add	sp, #8
 8000392:	bd80      	pop	{r7, pc}

08000394 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b084      	sub	sp, #16
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800039c:	4b07      	ldr	r3, [pc, #28]	; (80003bc <LL_APB2_GRP1_EnableClock+0x28>)
 800039e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80003a0:	4b06      	ldr	r3, [pc, #24]	; (80003bc <LL_APB2_GRP1_EnableClock+0x28>)
 80003a2:	687a      	ldr	r2, [r7, #4]
 80003a4:	430a      	orrs	r2, r1
 80003a6:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80003a8:	4b04      	ldr	r3, [pc, #16]	; (80003bc <LL_APB2_GRP1_EnableClock+0x28>)
 80003aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003ac:	687a      	ldr	r2, [r7, #4]
 80003ae:	4013      	ands	r3, r2
 80003b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003b2:	68fb      	ldr	r3, [r7, #12]
}
 80003b4:	46c0      	nop			; (mov r8, r8)
 80003b6:	46bd      	mov	sp, r7
 80003b8:	b004      	add	sp, #16
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	40021000 	.word	0x40021000

080003c0 <LL_IOP_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b084      	sub	sp, #16
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 80003c8:	4b07      	ldr	r3, [pc, #28]	; (80003e8 <LL_IOP_GRP1_EnableClock+0x28>)
 80003ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80003cc:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <LL_IOP_GRP1_EnableClock+0x28>)
 80003ce:	687a      	ldr	r2, [r7, #4]
 80003d0:	430a      	orrs	r2, r1
 80003d2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80003d4:	4b04      	ldr	r3, [pc, #16]	; (80003e8 <LL_IOP_GRP1_EnableClock+0x28>)
 80003d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003d8:	687a      	ldr	r2, [r7, #4]
 80003da:	4013      	ands	r3, r2
 80003dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003de:	68fb      	ldr	r3, [r7, #12]
}
 80003e0:	46c0      	nop			; (mov r8, r8)
 80003e2:	46bd      	mov	sp, r7
 80003e4:	b004      	add	sp, #16
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	40021000 	.word	0x40021000

080003ec <MX_ADC_Init>:

/* USER CODE END 0 */

/* ADC init function */
void MX_ADC_Init(void)
{
 80003ec:	b5b0      	push	{r4, r5, r7, lr}
 80003ee:	b090      	sub	sp, #64	; 0x40
 80003f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80003f2:	2428      	movs	r4, #40	; 0x28
 80003f4:	193b      	adds	r3, r7, r4
 80003f6:	0018      	movs	r0, r3
 80003f8:	2314      	movs	r3, #20
 80003fa:	001a      	movs	r2, r3
 80003fc:	2100      	movs	r1, #0
 80003fe:	f001 feeb 	bl	80021d8 <memset>
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000402:	2518      	movs	r5, #24
 8000404:	197b      	adds	r3, r7, r5
 8000406:	0018      	movs	r0, r3
 8000408:	2310      	movs	r3, #16
 800040a:	001a      	movs	r2, r3
 800040c:	2100      	movs	r1, #0
 800040e:	f001 fee3 	bl	80021d8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000412:	003b      	movs	r3, r7
 8000414:	0018      	movs	r0, r3
 8000416:	2318      	movs	r3, #24
 8000418:	001a      	movs	r2, r3
 800041a:	2100      	movs	r1, #0
 800041c:	f001 fedc 	bl	80021d8 <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8000420:	2380      	movs	r3, #128	; 0x80
 8000422:	009b      	lsls	r3, r3, #2
 8000424:	0018      	movs	r0, r3
 8000426:	f7ff ffb5 	bl	8000394 <LL_APB2_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 800042a:	2001      	movs	r0, #1
 800042c:	f7ff ffc8 	bl	80003c0 <LL_IOP_GRP1_EnableClock>
  /**ADC GPIO Configuration
  PA1   ------> ADC_IN1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000430:	003b      	movs	r3, r7
 8000432:	2202      	movs	r2, #2
 8000434:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000436:	003b      	movs	r3, r7
 8000438:	2203      	movs	r2, #3
 800043a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800043c:	003b      	movs	r3, r7
 800043e:	2200      	movs	r2, #0
 8000440:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000442:	003a      	movs	r2, r7
 8000444:	23a0      	movs	r3, #160	; 0xa0
 8000446:	05db      	lsls	r3, r3, #23
 8000448:	0011      	movs	r1, r2
 800044a:	0018      	movs	r0, r3
 800044c:	f001 f931 	bl	80016b2 <LL_GPIO_Init>

  /* USER CODE END ADC_Init 1 */

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_1);
 8000450:	4a36      	ldr	r2, [pc, #216]	; (800052c <MX_ADC_Init+0x140>)
 8000452:	4b37      	ldr	r3, [pc, #220]	; (8000530 <MX_ADC_Init+0x144>)
 8000454:	0011      	movs	r1, r2
 8000456:	0018      	movs	r0, r3
 8000458:	f7ff ff46 	bl	80002e8 <LL_ADC_REG_SetSequencerChAdd>

  /** Common config
  */
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 800045c:	0021      	movs	r1, r4
 800045e:	187b      	adds	r3, r7, r1
 8000460:	2200      	movs	r2, #0
 8000462:	601a      	str	r2, [r3, #0]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000464:	187b      	adds	r3, r7, r1
 8000466:	2200      	movs	r2, #0
 8000468:	605a      	str	r2, [r3, #4]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 800046a:	187b      	adds	r3, r7, r1
 800046c:	2200      	movs	r2, #0
 800046e:	609a      	str	r2, [r3, #8]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000470:	187b      	adds	r3, r7, r1
 8000472:	2200      	movs	r2, #0
 8000474:	60da      	str	r2, [r3, #12]
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000476:	187b      	adds	r3, r7, r1
 8000478:	2200      	movs	r2, #0
 800047a:	611a      	str	r2, [r3, #16]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 800047c:	187b      	adds	r3, r7, r1
 800047e:	4a2c      	ldr	r2, [pc, #176]	; (8000530 <MX_ADC_Init+0x144>)
 8000480:	0019      	movs	r1, r3
 8000482:	0010      	movs	r0, r2
 8000484:	f001 f82a 	bl	80014dc <LL_ADC_REG_Init>
  LL_ADC_SetSamplingTimeCommonChannels(ADC1, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8000488:	4b29      	ldr	r3, [pc, #164]	; (8000530 <MX_ADC_Init+0x144>)
 800048a:	2100      	movs	r1, #0
 800048c:	0018      	movs	r0, r3
 800048e:	f7ff ff07 	bl	80002a0 <LL_ADC_SetSamplingTimeCommonChannels>
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 8000492:	4b27      	ldr	r3, [pc, #156]	; (8000530 <MX_ADC_Init+0x144>)
 8000494:	2100      	movs	r1, #0
 8000496:	0018      	movs	r0, r3
 8000498:	f7ff ff37 	bl	800030a <LL_ADC_SetOverSamplingScope>
  LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
 800049c:	4b24      	ldr	r3, [pc, #144]	; (8000530 <MX_ADC_Init+0x144>)
 800049e:	2100      	movs	r1, #0
 80004a0:	0018      	movs	r0, r3
 80004a2:	f7ff ff0f 	bl	80002c4 <LL_ADC_REG_SetSequencerScanDirection>
  LL_ADC_SetCommonFrequencyMode(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_CLOCK_FREQ_MODE_HIGH);
 80004a6:	4b23      	ldr	r3, [pc, #140]	; (8000534 <MX_ADC_Init+0x148>)
 80004a8:	2100      	movs	r1, #0
 80004aa:	0018      	movs	r0, r3
 80004ac:	f7ff fee4 	bl	8000278 <LL_ADC_SetCommonFrequencyMode>
  LL_ADC_DisableIT_EOC(ADC1);
 80004b0:	4b1f      	ldr	r3, [pc, #124]	; (8000530 <MX_ADC_Init+0x144>)
 80004b2:	0018      	movs	r0, r3
 80004b4:	f7ff ff50 	bl	8000358 <LL_ADC_DisableIT_EOC>
  LL_ADC_DisableIT_EOS(ADC1);
 80004b8:	4b1d      	ldr	r3, [pc, #116]	; (8000530 <MX_ADC_Init+0x144>)
 80004ba:	0018      	movs	r0, r3
 80004bc:	f7ff ff5b 	bl	8000376 <LL_ADC_DisableIT_EOS>
  ADC_InitStruct.Clock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 80004c0:	197b      	adds	r3, r7, r5
 80004c2:	2280      	movs	r2, #128	; 0x80
 80004c4:	05d2      	lsls	r2, r2, #23
 80004c6:	601a      	str	r2, [r3, #0]
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 80004c8:	197b      	adds	r3, r7, r5
 80004ca:	2200      	movs	r2, #0
 80004cc:	605a      	str	r2, [r3, #4]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80004ce:	197b      	adds	r3, r7, r5
 80004d0:	2200      	movs	r2, #0
 80004d2:	609a      	str	r2, [r3, #8]
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 80004d4:	197b      	adds	r3, r7, r5
 80004d6:	2200      	movs	r2, #0
 80004d8:	60da      	str	r2, [r3, #12]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80004da:	197b      	adds	r3, r7, r5
 80004dc:	4a14      	ldr	r2, [pc, #80]	; (8000530 <MX_ADC_Init+0x144>)
 80004de:	0019      	movs	r1, r3
 80004e0:	0010      	movs	r0, r2
 80004e2:	f000 ffc5 	bl	8001470 <LL_ADC_Init>

  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 80004e6:	4b12      	ldr	r3, [pc, #72]	; (8000530 <MX_ADC_Init+0x144>)
 80004e8:	0018      	movs	r0, r3
 80004ea:	f7ff ff21 	bl	8000330 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 80004ee:	4b12      	ldr	r3, [pc, #72]	; (8000538 <MX_ADC_Init+0x14c>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4912      	ldr	r1, [pc, #72]	; (800053c <MX_ADC_Init+0x150>)
 80004f4:	0018      	movs	r0, r3
 80004f6:	f7ff fe07 	bl	8000108 <__udivsi3>
 80004fa:	0003      	movs	r3, r0
 80004fc:	001a      	movs	r2, r3
 80004fe:	0013      	movs	r3, r2
 8000500:	009b      	lsls	r3, r3, #2
 8000502:	189b      	adds	r3, r3, r2
 8000504:	005b      	lsls	r3, r3, #1
 8000506:	210a      	movs	r1, #10
 8000508:	0018      	movs	r0, r3
 800050a:	f7ff fdfd 	bl	8000108 <__udivsi3>
 800050e:	0003      	movs	r3, r0
 8000510:	63fb      	str	r3, [r7, #60]	; 0x3c
  while(wait_loop_index != 0)
 8000512:	e002      	b.n	800051a <MX_ADC_Init+0x12e>
  {
    wait_loop_index--;
 8000514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000516:	3b01      	subs	r3, #1
 8000518:	63fb      	str	r3, [r7, #60]	; 0x3c
  while(wait_loop_index != 0)
 800051a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800051c:	2b00      	cmp	r3, #0
 800051e:	d1f9      	bne.n	8000514 <MX_ADC_Init+0x128>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000520:	46c0      	nop			; (mov r8, r8)
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	46bd      	mov	sp, r7
 8000526:	b010      	add	sp, #64	; 0x40
 8000528:	bdb0      	pop	{r4, r5, r7, pc}
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	04000002 	.word	0x04000002
 8000530:	40012400 	.word	0x40012400
 8000534:	40012708 	.word	0x40012708
 8000538:	20000000 	.word	0x20000000
 800053c:	00030d40 	.word	0x00030d40

08000540 <LL_IOP_GRP1_EnableClock>:
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8000548:	4b07      	ldr	r3, [pc, #28]	; (8000568 <LL_IOP_GRP1_EnableClock+0x28>)
 800054a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <LL_IOP_GRP1_EnableClock+0x28>)
 800054e:	687a      	ldr	r2, [r7, #4]
 8000550:	430a      	orrs	r2, r1
 8000552:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000554:	4b04      	ldr	r3, [pc, #16]	; (8000568 <LL_IOP_GRP1_EnableClock+0x28>)
 8000556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000558:	687a      	ldr	r2, [r7, #4]
 800055a:	4013      	ands	r3, r2
 800055c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800055e:	68fb      	ldr	r3, [r7, #12]
}
 8000560:	46c0      	nop			; (mov r8, r8)
 8000562:	46bd      	mov	sp, r7
 8000564:	b004      	add	sp, #16
 8000566:	bd80      	pop	{r7, pc}
 8000568:	40021000 	.word	0x40021000

0800056c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	683a      	ldr	r2, [r7, #0]
 800057a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800057c:	46c0      	nop			; (mov r8, r8)
 800057e:	46bd      	mov	sp, r7
 8000580:	b002      	add	sp, #8
 8000582:	bd80      	pop	{r7, pc}

08000584 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058a:	003b      	movs	r3, r7
 800058c:	0018      	movs	r0, r3
 800058e:	2318      	movs	r3, #24
 8000590:	001a      	movs	r2, r3
 8000592:	2100      	movs	r1, #0
 8000594:	f001 fe20 	bl	80021d8 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000598:	2001      	movs	r0, #1
 800059a:	f7ff ffd1 	bl	8000540 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(DAC_nLDAC_GPIO_Port, DAC_nLDAC_Pin);
 800059e:	23a0      	movs	r3, #160	; 0xa0
 80005a0:	05db      	lsls	r3, r3, #23
 80005a2:	2108      	movs	r1, #8
 80005a4:	0018      	movs	r0, r3
 80005a6:	f7ff ffe1 	bl	800056c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DAC_nCS_GPIO_Port, DAC_nCS_Pin);
 80005aa:	23a0      	movs	r3, #160	; 0xa0
 80005ac:	05db      	lsls	r3, r3, #23
 80005ae:	2110      	movs	r1, #16
 80005b0:	0018      	movs	r0, r3
 80005b2:	f7ff ffdb 	bl	800056c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = DAC_nLDAC_Pin;
 80005b6:	003b      	movs	r3, r7
 80005b8:	2208      	movs	r2, #8
 80005ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80005bc:	003b      	movs	r3, r7
 80005be:	2201      	movs	r2, #1
 80005c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80005c2:	003b      	movs	r3, r7
 80005c4:	2200      	movs	r2, #0
 80005c6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80005c8:	003b      	movs	r3, r7
 80005ca:	2200      	movs	r2, #0
 80005cc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80005ce:	003b      	movs	r3, r7
 80005d0:	2200      	movs	r2, #0
 80005d2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DAC_nLDAC_GPIO_Port, &GPIO_InitStruct);
 80005d4:	003a      	movs	r2, r7
 80005d6:	23a0      	movs	r3, #160	; 0xa0
 80005d8:	05db      	lsls	r3, r3, #23
 80005da:	0011      	movs	r1, r2
 80005dc:	0018      	movs	r0, r3
 80005de:	f001 f868 	bl	80016b2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DAC_nCS_Pin;
 80005e2:	003b      	movs	r3, r7
 80005e4:	2210      	movs	r2, #16
 80005e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80005e8:	003b      	movs	r3, r7
 80005ea:	2201      	movs	r2, #1
 80005ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80005ee:	003b      	movs	r3, r7
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80005f4:	003b      	movs	r3, r7
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80005fa:	003b      	movs	r3, r7
 80005fc:	2200      	movs	r2, #0
 80005fe:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DAC_nCS_GPIO_Port, &GPIO_InitStruct);
 8000600:	003a      	movs	r2, r7
 8000602:	23a0      	movs	r3, #160	; 0xa0
 8000604:	05db      	lsls	r3, r3, #23
 8000606:	0011      	movs	r1, r2
 8000608:	0018      	movs	r0, r3
 800060a:	f001 f852 	bl	80016b2 <LL_GPIO_Init>

}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	46bd      	mov	sp, r7
 8000612:	b006      	add	sp, #24
 8000614:	bd80      	pop	{r7, pc}

08000616 <LL_TIM_EnableCounter>:
{
 8000616:	b580      	push	{r7, lr}
 8000618:	b082      	sub	sp, #8
 800061a:	af00      	add	r7, sp, #0
 800061c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	2201      	movs	r2, #1
 8000624:	431a      	orrs	r2, r3
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	601a      	str	r2, [r3, #0]
}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	46bd      	mov	sp, r7
 800062e:	b002      	add	sp, #8
 8000630:	bd80      	pop	{r7, pc}

08000632 <LL_TIM_CC_EnableChannel>:
{
 8000632:	b580      	push	{r7, lr}
 8000634:	b082      	sub	sp, #8
 8000636:	af00      	add	r7, sp, #0
 8000638:	6078      	str	r0, [r7, #4]
 800063a:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	6a1a      	ldr	r2, [r3, #32]
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	431a      	orrs	r2, r3
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	621a      	str	r2, [r3, #32]
}
 8000648:	46c0      	nop			; (mov r8, r8)
 800064a:	46bd      	mov	sp, r7
 800064c:	b002      	add	sp, #8
 800064e:	bd80      	pop	{r7, pc}

08000650 <LL_TIM_OC_SetCompareCH1>:
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	683a      	ldr	r2, [r7, #0]
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000660:	46c0      	nop			; (mov r8, r8)
 8000662:	46bd      	mov	sp, r7
 8000664:	b002      	add	sp, #8
 8000666:	bd80      	pop	{r7, pc}

08000668 <LedStart>:
 *      Author: Antoine
 */
#include "tim.h"

// Démarre le timer
void LedStart(void){
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	// Démarrer le timer
	LL_TIM_EnableCounter(TIM2);
 800066c:	2380      	movs	r3, #128	; 0x80
 800066e:	05db      	lsls	r3, r3, #23
 8000670:	0018      	movs	r0, r3
 8000672:	f7ff ffd0 	bl	8000616 <LL_TIM_EnableCounter>
	// Activer la sortie PWM
	LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);
 8000676:	2380      	movs	r3, #128	; 0x80
 8000678:	05db      	lsls	r3, r3, #23
 800067a:	2101      	movs	r1, #1
 800067c:	0018      	movs	r0, r3
 800067e:	f7ff ffd8 	bl	8000632 <LL_TIM_CC_EnableChannel>

}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <LedSetValue>:
// Configure le rapport cyclique de la PWM entre 0 et 255
void LedSetValue(uint8_t val)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	0002      	movs	r2, r0
 8000690:	1dfb      	adds	r3, r7, #7
 8000692:	701a      	strb	r2, [r3, #0]
	// Modifier le rapport cyclique
	LL_TIM_OC_SetCompareCH1(TIM2, val);
 8000694:	1dfb      	adds	r3, r7, #7
 8000696:	781a      	ldrb	r2, [r3, #0]
 8000698:	2380      	movs	r3, #128	; 0x80
 800069a:	05db      	lsls	r3, r3, #23
 800069c:	0011      	movs	r1, r2
 800069e:	0018      	movs	r0, r3
 80006a0:	f7ff ffd6 	bl	8000650 <LL_TIM_OC_SetCompareCH1>
}
 80006a4:	46c0      	nop			; (mov r8, r8)
 80006a6:	46bd      	mov	sp, r7
 80006a8:	b002      	add	sp, #8
 80006aa:	bd80      	pop	{r7, pc}

080006ac <LedPulse>:
// À chaque appel, cette fonction incrémente la luminosité de la LED
// Arrivé à la valeur maximale, chaque appel décrémente la LED
void LedPulse(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	static int val = 0;
	static int sens = 0;

	if (val == 0)
 80006b0:	4b14      	ldr	r3, [pc, #80]	; (8000704 <LedPulse+0x58>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d102      	bne.n	80006be <LedPulse+0x12>
	{
		sens = 1;
 80006b8:	4b13      	ldr	r3, [pc, #76]	; (8000708 <LedPulse+0x5c>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
	}

	if (sens == 1)
 80006be:	4b12      	ldr	r3, [pc, #72]	; (8000708 <LedPulse+0x5c>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d104      	bne.n	80006d0 <LedPulse+0x24>
		val++;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <LedPulse+0x58>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	1c5a      	adds	r2, r3, #1
 80006cc:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <LedPulse+0x58>)
 80006ce:	601a      	str	r2, [r3, #0]

	if(val == 255)
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <LedPulse+0x58>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2bff      	cmp	r3, #255	; 0xff
 80006d6:	d102      	bne.n	80006de <LedPulse+0x32>
		sens = 0;
 80006d8:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <LedPulse+0x5c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]

	if(sens == 0)
 80006de:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <LedPulse+0x5c>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d104      	bne.n	80006f0 <LedPulse+0x44>
		val--;
 80006e6:	4b07      	ldr	r3, [pc, #28]	; (8000704 <LedPulse+0x58>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	1e5a      	subs	r2, r3, #1
 80006ec:	4b05      	ldr	r3, [pc, #20]	; (8000704 <LedPulse+0x58>)
 80006ee:	601a      	str	r2, [r3, #0]

	LedSetValue(val);
 80006f0:	4b04      	ldr	r3, [pc, #16]	; (8000704 <LedPulse+0x58>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	0018      	movs	r0, r3
 80006f8:	f7ff ffc6 	bl	8000688 <LedSetValue>

}
 80006fc:	46c0      	nop			; (mov r8, r8)
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	20000020 	.word	0x20000020
 8000708:	20000024 	.word	0x20000024

0800070c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800070c:	b590      	push	{r4, r7, lr}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	0002      	movs	r2, r0
 8000714:	6039      	str	r1, [r7, #0]
 8000716:	1dfb      	adds	r3, r7, #7
 8000718:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800071a:	1dfb      	adds	r3, r7, #7
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2b7f      	cmp	r3, #127	; 0x7f
 8000720:	d828      	bhi.n	8000774 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000722:	4a2f      	ldr	r2, [pc, #188]	; (80007e0 <__NVIC_SetPriority+0xd4>)
 8000724:	1dfb      	adds	r3, r7, #7
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	b25b      	sxtb	r3, r3
 800072a:	089b      	lsrs	r3, r3, #2
 800072c:	33c0      	adds	r3, #192	; 0xc0
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	589b      	ldr	r3, [r3, r2]
 8000732:	1dfa      	adds	r2, r7, #7
 8000734:	7812      	ldrb	r2, [r2, #0]
 8000736:	0011      	movs	r1, r2
 8000738:	2203      	movs	r2, #3
 800073a:	400a      	ands	r2, r1
 800073c:	00d2      	lsls	r2, r2, #3
 800073e:	21ff      	movs	r1, #255	; 0xff
 8000740:	4091      	lsls	r1, r2
 8000742:	000a      	movs	r2, r1
 8000744:	43d2      	mvns	r2, r2
 8000746:	401a      	ands	r2, r3
 8000748:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	019b      	lsls	r3, r3, #6
 800074e:	22ff      	movs	r2, #255	; 0xff
 8000750:	401a      	ands	r2, r3
 8000752:	1dfb      	adds	r3, r7, #7
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	0018      	movs	r0, r3
 8000758:	2303      	movs	r3, #3
 800075a:	4003      	ands	r3, r0
 800075c:	00db      	lsls	r3, r3, #3
 800075e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000760:	481f      	ldr	r0, [pc, #124]	; (80007e0 <__NVIC_SetPriority+0xd4>)
 8000762:	1dfb      	adds	r3, r7, #7
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	b25b      	sxtb	r3, r3
 8000768:	089b      	lsrs	r3, r3, #2
 800076a:	430a      	orrs	r2, r1
 800076c:	33c0      	adds	r3, #192	; 0xc0
 800076e:	009b      	lsls	r3, r3, #2
 8000770:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000772:	e031      	b.n	80007d8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000774:	4a1b      	ldr	r2, [pc, #108]	; (80007e4 <__NVIC_SetPriority+0xd8>)
 8000776:	1dfb      	adds	r3, r7, #7
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	0019      	movs	r1, r3
 800077c:	230f      	movs	r3, #15
 800077e:	400b      	ands	r3, r1
 8000780:	3b08      	subs	r3, #8
 8000782:	089b      	lsrs	r3, r3, #2
 8000784:	3306      	adds	r3, #6
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	18d3      	adds	r3, r2, r3
 800078a:	3304      	adds	r3, #4
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	1dfa      	adds	r2, r7, #7
 8000790:	7812      	ldrb	r2, [r2, #0]
 8000792:	0011      	movs	r1, r2
 8000794:	2203      	movs	r2, #3
 8000796:	400a      	ands	r2, r1
 8000798:	00d2      	lsls	r2, r2, #3
 800079a:	21ff      	movs	r1, #255	; 0xff
 800079c:	4091      	lsls	r1, r2
 800079e:	000a      	movs	r2, r1
 80007a0:	43d2      	mvns	r2, r2
 80007a2:	401a      	ands	r2, r3
 80007a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	019b      	lsls	r3, r3, #6
 80007aa:	22ff      	movs	r2, #255	; 0xff
 80007ac:	401a      	ands	r2, r3
 80007ae:	1dfb      	adds	r3, r7, #7
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	0018      	movs	r0, r3
 80007b4:	2303      	movs	r3, #3
 80007b6:	4003      	ands	r3, r0
 80007b8:	00db      	lsls	r3, r3, #3
 80007ba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007bc:	4809      	ldr	r0, [pc, #36]	; (80007e4 <__NVIC_SetPriority+0xd8>)
 80007be:	1dfb      	adds	r3, r7, #7
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	001c      	movs	r4, r3
 80007c4:	230f      	movs	r3, #15
 80007c6:	4023      	ands	r3, r4
 80007c8:	3b08      	subs	r3, #8
 80007ca:	089b      	lsrs	r3, r3, #2
 80007cc:	430a      	orrs	r2, r1
 80007ce:	3306      	adds	r3, #6
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	18c3      	adds	r3, r0, r3
 80007d4:	3304      	adds	r3, #4
 80007d6:	601a      	str	r2, [r3, #0]
}
 80007d8:	46c0      	nop			; (mov r8, r8)
 80007da:	46bd      	mov	sp, r7
 80007dc:	b003      	add	sp, #12
 80007de:	bd90      	pop	{r4, r7, pc}
 80007e0:	e000e100 	.word	0xe000e100
 80007e4:	e000ed00 	.word	0xe000ed00

080007e8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80007ec:	4b04      	ldr	r3, [pc, #16]	; (8000800 <LL_RCC_HSI_Enable+0x18>)
 80007ee:	681a      	ldr	r2, [r3, #0]
 80007f0:	4b03      	ldr	r3, [pc, #12]	; (8000800 <LL_RCC_HSI_Enable+0x18>)
 80007f2:	2101      	movs	r1, #1
 80007f4:	430a      	orrs	r2, r1
 80007f6:	601a      	str	r2, [r3, #0]
}
 80007f8:	46c0      	nop			; (mov r8, r8)
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	40021000 	.word	0x40021000

08000804 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8000808:	4b05      	ldr	r3, [pc, #20]	; (8000820 <LL_RCC_HSI_IsReady+0x1c>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2204      	movs	r2, #4
 800080e:	4013      	ands	r3, r2
 8000810:	2b04      	cmp	r3, #4
 8000812:	d101      	bne.n	8000818 <LL_RCC_HSI_IsReady+0x14>
 8000814:	2301      	movs	r3, #1
 8000816:	e000      	b.n	800081a <LL_RCC_HSI_IsReady+0x16>
 8000818:	2300      	movs	r3, #0
}
 800081a:	0018      	movs	r0, r3
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40021000 	.word	0x40021000

08000824 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	4a06      	ldr	r2, [pc, #24]	; (800084c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000832:	4013      	ands	r3, r2
 8000834:	0019      	movs	r1, r3
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	021a      	lsls	r2, r3, #8
 800083a:	4b03      	ldr	r3, [pc, #12]	; (8000848 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 800083c:	430a      	orrs	r2, r1
 800083e:	605a      	str	r2, [r3, #4]
}
 8000840:	46c0      	nop			; (mov r8, r8)
 8000842:	46bd      	mov	sp, r7
 8000844:	b002      	add	sp, #8
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40021000 	.word	0x40021000
 800084c:	ffffe0ff 	.word	0xffffe0ff

08000850 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <LL_RCC_SetSysClkSource+0x24>)
 800085a:	68db      	ldr	r3, [r3, #12]
 800085c:	2203      	movs	r2, #3
 800085e:	4393      	bics	r3, r2
 8000860:	0019      	movs	r1, r3
 8000862:	4b04      	ldr	r3, [pc, #16]	; (8000874 <LL_RCC_SetSysClkSource+0x24>)
 8000864:	687a      	ldr	r2, [r7, #4]
 8000866:	430a      	orrs	r2, r1
 8000868:	60da      	str	r2, [r3, #12]
}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	46bd      	mov	sp, r7
 800086e:	b002      	add	sp, #8
 8000870:	bd80      	pop	{r7, pc}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	40021000 	.word	0x40021000

08000878 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800087c:	4b03      	ldr	r3, [pc, #12]	; (800088c <LL_RCC_GetSysClkSource+0x14>)
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	220c      	movs	r2, #12
 8000882:	4013      	ands	r3, r2
}
 8000884:	0018      	movs	r0, r3
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	40021000 	.word	0x40021000

08000890 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <LL_RCC_SetAHBPrescaler+0x24>)
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	22f0      	movs	r2, #240	; 0xf0
 800089e:	4393      	bics	r3, r2
 80008a0:	0019      	movs	r1, r3
 80008a2:	4b04      	ldr	r3, [pc, #16]	; (80008b4 <LL_RCC_SetAHBPrescaler+0x24>)
 80008a4:	687a      	ldr	r2, [r7, #4]
 80008a6:	430a      	orrs	r2, r1
 80008a8:	60da      	str	r2, [r3, #12]
}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	46bd      	mov	sp, r7
 80008ae:	b002      	add	sp, #8
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	40021000 	.word	0x40021000

080008b8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <LL_RCC_SetAPB1Prescaler+0x24>)
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	4a06      	ldr	r2, [pc, #24]	; (80008e0 <LL_RCC_SetAPB1Prescaler+0x28>)
 80008c6:	4013      	ands	r3, r2
 80008c8:	0019      	movs	r1, r3
 80008ca:	4b04      	ldr	r3, [pc, #16]	; (80008dc <LL_RCC_SetAPB1Prescaler+0x24>)
 80008cc:	687a      	ldr	r2, [r7, #4]
 80008ce:	430a      	orrs	r2, r1
 80008d0:	60da      	str	r2, [r3, #12]
}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	46bd      	mov	sp, r7
 80008d6:	b002      	add	sp, #8
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	40021000 	.word	0x40021000
 80008e0:	fffff8ff 	.word	0xfffff8ff

080008e4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <LL_RCC_SetAPB2Prescaler+0x24>)
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	4a06      	ldr	r2, [pc, #24]	; (800090c <LL_RCC_SetAPB2Prescaler+0x28>)
 80008f2:	4013      	ands	r3, r2
 80008f4:	0019      	movs	r1, r3
 80008f6:	4b04      	ldr	r3, [pc, #16]	; (8000908 <LL_RCC_SetAPB2Prescaler+0x24>)
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	430a      	orrs	r2, r1
 80008fc:	60da      	str	r2, [r3, #12]
}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	46bd      	mov	sp, r7
 8000902:	b002      	add	sp, #8
 8000904:	bd80      	pop	{r7, pc}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	40021000 	.word	0x40021000
 800090c:	ffffc7ff 	.word	0xffffc7ff

08000910 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000918:	4b08      	ldr	r3, [pc, #32]	; (800093c <LL_RCC_SetUSARTClockSource+0x2c>)
 800091a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091c:	687a      	ldr	r2, [r7, #4]
 800091e:	0c12      	lsrs	r2, r2, #16
 8000920:	43d2      	mvns	r2, r2
 8000922:	401a      	ands	r2, r3
 8000924:	0011      	movs	r1, r2
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	041b      	lsls	r3, r3, #16
 800092a:	0c1a      	lsrs	r2, r3, #16
 800092c:	4b03      	ldr	r3, [pc, #12]	; (800093c <LL_RCC_SetUSARTClockSource+0x2c>)
 800092e:	430a      	orrs	r2, r1
 8000930:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	46bd      	mov	sp, r7
 8000936:	b002      	add	sp, #8
 8000938:	bd80      	pop	{r7, pc}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	40021000 	.word	0x40021000

08000940 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000944:	4b04      	ldr	r3, [pc, #16]	; (8000958 <LL_RCC_PLL_Enable+0x18>)
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	4b03      	ldr	r3, [pc, #12]	; (8000958 <LL_RCC_PLL_Enable+0x18>)
 800094a:	2180      	movs	r1, #128	; 0x80
 800094c:	0449      	lsls	r1, r1, #17
 800094e:	430a      	orrs	r2, r1
 8000950:	601a      	str	r2, [r3, #0]
}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40021000 	.word	0x40021000

0800095c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8000960:	4b07      	ldr	r3, [pc, #28]	; (8000980 <LL_RCC_PLL_IsReady+0x24>)
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	2380      	movs	r3, #128	; 0x80
 8000966:	049b      	lsls	r3, r3, #18
 8000968:	401a      	ands	r2, r3
 800096a:	2380      	movs	r3, #128	; 0x80
 800096c:	049b      	lsls	r3, r3, #18
 800096e:	429a      	cmp	r2, r3
 8000970:	d101      	bne.n	8000976 <LL_RCC_PLL_IsReady+0x1a>
 8000972:	2301      	movs	r3, #1
 8000974:	e000      	b.n	8000978 <LL_RCC_PLL_IsReady+0x1c>
 8000976:	2300      	movs	r3, #0
}
 8000978:	0018      	movs	r0, r3
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	40021000 	.word	0x40021000

08000984 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul, uint32_t PLLDiv)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL | RCC_CFGR_PLLDIV, Source | PLLMul | PLLDiv);
 8000990:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <LL_RCC_PLL_ConfigDomain_SYS+0x30>)
 8000992:	68db      	ldr	r3, [r3, #12]
 8000994:	4a08      	ldr	r2, [pc, #32]	; (80009b8 <LL_RCC_PLL_ConfigDomain_SYS+0x34>)
 8000996:	4013      	ands	r3, r2
 8000998:	0019      	movs	r1, r3
 800099a:	68fa      	ldr	r2, [r7, #12]
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	431a      	orrs	r2, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	431a      	orrs	r2, r3
 80009a4:	4b03      	ldr	r3, [pc, #12]	; (80009b4 <LL_RCC_PLL_ConfigDomain_SYS+0x30>)
 80009a6:	430a      	orrs	r2, r1
 80009a8:	60da      	str	r2, [r3, #12]
}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	46bd      	mov	sp, r7
 80009ae:	b004      	add	sp, #16
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	40021000 	.word	0x40021000
 80009b8:	ff02ffff 	.word	0xff02ffff

080009bc <LL_APB1_GRP1_EnableClock>:
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80009c4:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <LL_APB1_GRP1_EnableClock+0x28>)
 80009c6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <LL_APB1_GRP1_EnableClock+0x28>)
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	430a      	orrs	r2, r1
 80009ce:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80009d0:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <LL_APB1_GRP1_EnableClock+0x28>)
 80009d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009d4:	687a      	ldr	r2, [r7, #4]
 80009d6:	4013      	ands	r3, r2
 80009d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009da:	68fb      	ldr	r3, [r7, #12]
}
 80009dc:	46c0      	nop			; (mov r8, r8)
 80009de:	46bd      	mov	sp, r7
 80009e0:	b004      	add	sp, #16
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40021000 	.word	0x40021000

080009e8 <LL_APB2_GRP1_EnableClock>:
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80009f0:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <LL_APB2_GRP1_EnableClock+0x28>)
 80009f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <LL_APB2_GRP1_EnableClock+0x28>)
 80009f6:	687a      	ldr	r2, [r7, #4]
 80009f8:	430a      	orrs	r2, r1
 80009fa:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80009fc:	4b04      	ldr	r3, [pc, #16]	; (8000a10 <LL_APB2_GRP1_EnableClock+0x28>)
 80009fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a00:	687a      	ldr	r2, [r7, #4]
 8000a02:	4013      	ands	r3, r2
 8000a04:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a06:	68fb      	ldr	r3, [r7, #12]
}
 8000a08:	46c0      	nop			; (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	b004      	add	sp, #16
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40021000 	.word	0x40021000

08000a14 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <LL_FLASH_SetLatency+0x24>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2201      	movs	r2, #1
 8000a22:	4393      	bics	r3, r2
 8000a24:	0019      	movs	r1, r3
 8000a26:	4b04      	ldr	r3, [pc, #16]	; (8000a38 <LL_FLASH_SetLatency+0x24>)
 8000a28:	687a      	ldr	r2, [r7, #4]
 8000a2a:	430a      	orrs	r2, r1
 8000a2c:	601a      	str	r2, [r3, #0]
}
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	46bd      	mov	sp, r7
 8000a32:	b002      	add	sp, #8
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	40022000 	.word	0x40022000

08000a3c <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000a40:	4b03      	ldr	r3, [pc, #12]	; (8000a50 <LL_FLASH_GetLatency+0x14>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2201      	movs	r2, #1
 8000a46:	4013      	ands	r3, r2
}
 8000a48:	0018      	movs	r0, r3
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	40022000 	.word	0x40022000

08000a54 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a06      	ldr	r2, [pc, #24]	; (8000a7c <LL_PWR_SetRegulVoltageScaling+0x28>)
 8000a62:	4013      	ands	r3, r2
 8000a64:	0019      	movs	r1, r3
 8000a66:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000a68:	687a      	ldr	r2, [r7, #4]
 8000a6a:	430a      	orrs	r2, r1
 8000a6c:	601a      	str	r2, [r3, #0]
}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	46bd      	mov	sp, r7
 8000a72:	b002      	add	sp, #8
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	40007000 	.word	0x40007000
 8000a7c:	ffffe7ff 	.word	0xffffe7ff

08000a80 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOSF       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <LL_PWR_IsActiveFlag_VOS+0x1c>)
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	2210      	movs	r2, #16
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	3b10      	subs	r3, #16
 8000a8e:	425a      	negs	r2, r3
 8000a90:	4153      	adcs	r3, r2
 8000a92:	b2db      	uxtb	r3, r3
}
 8000a94:	0018      	movs	r0, r3
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	40007000 	.word	0x40007000

08000aa0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	f7ff ff9f 	bl	80009e8 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000aaa:	2380      	movs	r3, #128	; 0x80
 8000aac:	055b      	lsls	r3, r3, #21
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f7ff ff84 	bl	80009bc <LL_APB1_GRP1_EnableClock>

	/* SysTick_IRQn interrupt configuration */
	NVIC_SetPriority(SysTick_IRQn, 3);
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	425b      	negs	r3, r3
 8000ab8:	2103      	movs	r1, #3
 8000aba:	0018      	movs	r0, r3
 8000abc:	f7ff fe26 	bl	800070c <__NVIC_SetPriority>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ac0:	f000 f812 	bl	8000ae8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ac4:	f7ff fd5e 	bl	8000584 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000ac8:	f000 fc08 	bl	80012dc <MX_USART2_UART_Init>
	MX_ADC_Init();
 8000acc:	f7ff fc8e 	bl	80003ec <MX_ADC_Init>
	MX_TIM2_Init();
 8000ad0:	f000 faeb 	bl	80010aa <MX_TIM2_Init>
	MX_SPI1_Init();
 8000ad4:	f000 f89c 	bl	8000c10 <MX_SPI1_Init>
	MX_TIM21_Init();
 8000ad8:	f000 fb6e 	bl	80011b8 <MX_TIM21_Init>
	/* USER CODE BEGIN 2 */
	LedStart();
 8000adc:	f7ff fdc4 	bl	8000668 <LedStart>
	TimeBaseStartIT();
 8000ae0:	f7ff fbba 	bl	8000258 <TimeBaseStartIT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <main+0x44>
	...

08000ae8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8000aec:	2001      	movs	r0, #1
 8000aee:	f7ff ff91 	bl	8000a14 <LL_FLASH_SetLatency>
	while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_1)
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	f7ff ffa2 	bl	8000a3c <LL_FLASH_GetLatency>
 8000af8:	0003      	movs	r3, r0
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d1fa      	bne.n	8000af4 <SystemClock_Config+0xc>
	{
	}
	LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000afe:	2380      	movs	r3, #128	; 0x80
 8000b00:	011b      	lsls	r3, r3, #4
 8000b02:	0018      	movs	r0, r3
 8000b04:	f7ff ffa6 	bl	8000a54 <LL_PWR_SetRegulVoltageScaling>
	while (LL_PWR_IsActiveFlag_VOS() != 0)
 8000b08:	46c0      	nop			; (mov r8, r8)
 8000b0a:	f7ff ffb9 	bl	8000a80 <LL_PWR_IsActiveFlag_VOS>
 8000b0e:	1e03      	subs	r3, r0, #0
 8000b10:	d1fb      	bne.n	8000b0a <SystemClock_Config+0x22>
	{
	}
	LL_RCC_HSI_Enable();
 8000b12:	f7ff fe69 	bl	80007e8 <LL_RCC_HSI_Enable>

	/* Wait till HSI is ready */
	while(LL_RCC_HSI_IsReady() != 1)
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	f7ff fe74 	bl	8000804 <LL_RCC_HSI_IsReady>
 8000b1c:	0003      	movs	r3, r0
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d1fa      	bne.n	8000b18 <SystemClock_Config+0x30>
	{

	}
	LL_RCC_HSI_SetCalibTrimming(16);
 8000b22:	2010      	movs	r0, #16
 8000b24:	f7ff fe7e 	bl	8000824 <LL_RCC_HSI_SetCalibTrimming>
	LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLL_MUL_4, LL_RCC_PLL_DIV_2);
 8000b28:	2380      	movs	r3, #128	; 0x80
 8000b2a:	03da      	lsls	r2, r3, #15
 8000b2c:	2380      	movs	r3, #128	; 0x80
 8000b2e:	02db      	lsls	r3, r3, #11
 8000b30:	0019      	movs	r1, r3
 8000b32:	2000      	movs	r0, #0
 8000b34:	f7ff ff26 	bl	8000984 <LL_RCC_PLL_ConfigDomain_SYS>
	LL_RCC_PLL_Enable();
 8000b38:	f7ff ff02 	bl	8000940 <LL_RCC_PLL_Enable>

	/* Wait till PLL is ready */
	while(LL_RCC_PLL_IsReady() != 1)
 8000b3c:	46c0      	nop			; (mov r8, r8)
 8000b3e:	f7ff ff0d 	bl	800095c <LL_RCC_PLL_IsReady>
 8000b42:	0003      	movs	r3, r0
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d1fa      	bne.n	8000b3e <SystemClock_Config+0x56>
	{

	}
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000b48:	2000      	movs	r0, #0
 8000b4a:	f7ff fea1 	bl	8000890 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000b4e:	2000      	movs	r0, #0
 8000b50:	f7ff feb2 	bl	80008b8 <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8000b54:	2380      	movs	r3, #128	; 0x80
 8000b56:	019b      	lsls	r3, r3, #6
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f7ff fec3 	bl	80008e4 <LL_RCC_SetAPB2Prescaler>
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000b5e:	2003      	movs	r0, #3
 8000b60:	f7ff fe76 	bl	8000850 <LL_RCC_SetSysClkSource>

	/* Wait till System clock is ready */
	while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000b64:	46c0      	nop			; (mov r8, r8)
 8000b66:	f7ff fe87 	bl	8000878 <LL_RCC_GetSysClkSource>
 8000b6a:	0003      	movs	r3, r0
 8000b6c:	2b0c      	cmp	r3, #12
 8000b6e:	d1fa      	bne.n	8000b66 <SystemClock_Config+0x7e>
	{

	}

	LL_Init1msTick(32000000);
 8000b70:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <SystemClock_Config+0xa8>)
 8000b72:	0018      	movs	r0, r3
 8000b74:	f001 fb12 	bl	800219c <LL_Init1msTick>

	LL_SetSystemCoreClock(32000000);
 8000b78:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <SystemClock_Config+0xa8>)
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f001 fb1e 	bl	80021bc <LL_SetSystemCoreClock>
	LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 8000b80:	23c0      	movs	r3, #192	; 0xc0
 8000b82:	031b      	lsls	r3, r3, #12
 8000b84:	0018      	movs	r0, r3
 8000b86:	f7ff fec3 	bl	8000910 <LL_RCC_SetUSARTClockSource>
}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	01e84800 	.word	0x01e84800

08000b94 <LL_APB2_GRP1_EnableClock>:
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b9c:	4b07      	ldr	r3, [pc, #28]	; (8000bbc <LL_APB2_GRP1_EnableClock+0x28>)
 8000b9e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <LL_APB2_GRP1_EnableClock+0x28>)
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	430a      	orrs	r2, r1
 8000ba6:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ba8:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <LL_APB2_GRP1_EnableClock+0x28>)
 8000baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bac:	687a      	ldr	r2, [r7, #4]
 8000bae:	4013      	ands	r3, r2
 8000bb0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
}
 8000bb4:	46c0      	nop			; (mov r8, r8)
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	b004      	add	sp, #16
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40021000 	.word	0x40021000

08000bc0 <LL_IOP_GRP1_EnableClock>:
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8000bc8:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <LL_IOP_GRP1_EnableClock+0x28>)
 8000bca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <LL_IOP_GRP1_EnableClock+0x28>)
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	430a      	orrs	r2, r1
 8000bd2:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000bd4:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <LL_IOP_GRP1_EnableClock+0x28>)
 8000bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	4013      	ands	r3, r2
 8000bdc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bde:	68fb      	ldr	r3, [r7, #12]
}
 8000be0:	46c0      	nop			; (mov r8, r8)
 8000be2:	46bd      	mov	sp, r7
 8000be4:	b004      	add	sp, #16
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40021000 	.word	0x40021000

08000bec <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	2210      	movs	r2, #16
 8000bfc:	4393      	bics	r3, r2
 8000bfe:	001a      	movs	r2, r3
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	431a      	orrs	r2, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	605a      	str	r2, [r3, #4]
}
 8000c08:	46c0      	nop			; (mov r8, r8)
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	b002      	add	sp, #8
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c10:	b590      	push	{r4, r7, lr}
 8000c12:	b091      	sub	sp, #68	; 0x44
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000c16:	2418      	movs	r4, #24
 8000c18:	193b      	adds	r3, r7, r4
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	2328      	movs	r3, #40	; 0x28
 8000c1e:	001a      	movs	r2, r3
 8000c20:	2100      	movs	r1, #0
 8000c22:	f001 fad9 	bl	80021d8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c26:	003b      	movs	r3, r7
 8000c28:	0018      	movs	r0, r3
 8000c2a:	2318      	movs	r3, #24
 8000c2c:	001a      	movs	r2, r3
 8000c2e:	2100      	movs	r1, #0
 8000c30:	f001 fad2 	bl	80021d8 <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8000c34:	2380      	movs	r3, #128	; 0x80
 8000c36:	015b      	lsls	r3, r3, #5
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f7ff ffab 	bl	8000b94 <LL_APB2_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000c3e:	2001      	movs	r0, #1
 8000c40:	f7ff ffbe 	bl	8000bc0 <LL_IOP_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000c44:	003b      	movs	r3, r7
 8000c46:	2220      	movs	r2, #32
 8000c48:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000c4a:	003b      	movs	r3, r7
 8000c4c:	2202      	movs	r2, #2
 8000c4e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000c50:	003b      	movs	r3, r7
 8000c52:	2203      	movs	r2, #3
 8000c54:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c56:	003b      	movs	r3, r7
 8000c58:	2200      	movs	r2, #0
 8000c5a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c5c:	003b      	movs	r3, r7
 8000c5e:	2200      	movs	r2, #0
 8000c60:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8000c62:	003b      	movs	r3, r7
 8000c64:	2200      	movs	r2, #0
 8000c66:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c68:	003a      	movs	r2, r7
 8000c6a:	23a0      	movs	r3, #160	; 0xa0
 8000c6c:	05db      	lsls	r3, r3, #23
 8000c6e:	0011      	movs	r1, r2
 8000c70:	0018      	movs	r0, r3
 8000c72:	f000 fd1e 	bl	80016b2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000c76:	003b      	movs	r3, r7
 8000c78:	2240      	movs	r2, #64	; 0x40
 8000c7a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000c7c:	003b      	movs	r3, r7
 8000c7e:	2202      	movs	r2, #2
 8000c80:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000c82:	003b      	movs	r3, r7
 8000c84:	2203      	movs	r2, #3
 8000c86:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c88:	003b      	movs	r3, r7
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c8e:	003b      	movs	r3, r7
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8000c94:	003b      	movs	r3, r7
 8000c96:	2200      	movs	r2, #0
 8000c98:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9a:	003a      	movs	r2, r7
 8000c9c:	23a0      	movs	r3, #160	; 0xa0
 8000c9e:	05db      	lsls	r3, r3, #23
 8000ca0:	0011      	movs	r1, r2
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f000 fd05 	bl	80016b2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8000ca8:	003b      	movs	r3, r7
 8000caa:	2280      	movs	r2, #128	; 0x80
 8000cac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000cae:	003b      	movs	r3, r7
 8000cb0:	2202      	movs	r2, #2
 8000cb2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb4:	003b      	movs	r3, r7
 8000cb6:	2203      	movs	r2, #3
 8000cb8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000cba:	003b      	movs	r3, r7
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000cc0:	003b      	movs	r3, r7
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8000cc6:	003b      	movs	r3, r7
 8000cc8:	2200      	movs	r2, #0
 8000cca:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ccc:	003a      	movs	r2, r7
 8000cce:	23a0      	movs	r3, #160	; 0xa0
 8000cd0:	05db      	lsls	r3, r3, #23
 8000cd2:	0011      	movs	r1, r2
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f000 fcec 	bl	80016b2 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000cda:	193b      	adds	r3, r7, r4
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8000ce0:	193b      	adds	r3, r7, r4
 8000ce2:	2282      	movs	r2, #130	; 0x82
 8000ce4:	0052      	lsls	r2, r2, #1
 8000ce6:	605a      	str	r2, [r3, #4]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8000ce8:	0021      	movs	r1, r4
 8000cea:	187b      	adds	r3, r7, r1
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8000cf0:	187b      	adds	r3, r7, r1
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	60da      	str	r2, [r3, #12]
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8000cf6:	187b      	adds	r3, r7, r1
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8000cfc:	187b      	adds	r3, r7, r1
 8000cfe:	2280      	movs	r2, #128	; 0x80
 8000d00:	0092      	lsls	r2, r2, #2
 8000d02:	615a      	str	r2, [r3, #20]
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32;
 8000d04:	187b      	adds	r3, r7, r1
 8000d06:	2220      	movs	r2, #32
 8000d08:	619a      	str	r2, [r3, #24]
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8000d0a:	187b      	adds	r3, r7, r1
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	61da      	str	r2, [r3, #28]
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8000d10:	187b      	adds	r3, r7, r1
 8000d12:	2200      	movs	r2, #0
 8000d14:	621a      	str	r2, [r3, #32]
  SPI_InitStruct.CRCPoly = 7;
 8000d16:	187b      	adds	r3, r7, r1
 8000d18:	2207      	movs	r2, #7
 8000d1a:	625a      	str	r2, [r3, #36]	; 0x24
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8000d1c:	187b      	adds	r3, r7, r1
 8000d1e:	4a07      	ldr	r2, [pc, #28]	; (8000d3c <MX_SPI1_Init+0x12c>)
 8000d20:	0019      	movs	r1, r3
 8000d22:	0010      	movs	r0, r2
 8000d24:	f000 feda 	bl	8001adc <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8000d28:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <MX_SPI1_Init+0x12c>)
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	f7ff ff5d 	bl	8000bec <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	46bd      	mov	sp, r7
 8000d36:	b011      	add	sp, #68	; 0x44
 8000d38:	bd90      	pop	{r4, r7, pc}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	40013000 	.word	0x40013000

08000d40 <LL_TIM_ClearFlag_UPDATE>:
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2202      	movs	r2, #2
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	611a      	str	r2, [r3, #16]
}
 8000d50:	46c0      	nop			; (mov r8, r8)
 8000d52:	46bd      	mov	sp, r7
 8000d54:	b002      	add	sp, #8
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8000d5c:	e7fe      	b.n	8000d5c <NMI_Handler+0x4>

08000d5e <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 8000d62:	e7fe      	b.n	8000d62 <HardFault_Handler+0x4>

08000d64 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0

	/* USER CODE END SVC_IRQn 0 */
	/* USER CODE BEGIN SVC_IRQn 1 */

	/* USER CODE END SVC_IRQn 1 */
}
 8000d68:	46c0      	nop			; (mov r8, r8)
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
	/* USER CODE END SysTick_IRQn 0 */

	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8000d7c:	46c0      	nop			; (mov r8, r8)
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
	...

08000d84 <TIM21_IRQHandler>:

/**
 * @brief This function handles TIM21 global interrupt.
 */
void TIM21_IRQHandler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM21_IRQn 0 */
	LedPulse();
 8000d88:	f7ff fc90 	bl	80006ac <LedPulse>
	LL_TIM_ClearFlag_UPDATE(TIM21);
 8000d8c:	4b03      	ldr	r3, [pc, #12]	; (8000d9c <TIM21_IRQHandler+0x18>)
 8000d8e:	0018      	movs	r0, r3
 8000d90:	f7ff ffd6 	bl	8000d40 <LL_TIM_ClearFlag_UPDATE>

	/* USER CODE END TIM21_IRQn 0 */
	/* USER CODE BEGIN TIM21_IRQn 1 */

	/* USER CODE END TIM21_IRQn 1 */
}
 8000d94:	46c0      	nop			; (mov r8, r8)
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	40010800 	.word	0x40010800

08000da0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da4:	46c0      	nop			; (mov r8, r8)
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <__NVIC_EnableIRQ>:
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	0002      	movs	r2, r0
 8000db4:	1dfb      	adds	r3, r7, #7
 8000db6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000db8:	1dfb      	adds	r3, r7, #7
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b7f      	cmp	r3, #127	; 0x7f
 8000dbe:	d809      	bhi.n	8000dd4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dc0:	1dfb      	adds	r3, r7, #7
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	001a      	movs	r2, r3
 8000dc6:	231f      	movs	r3, #31
 8000dc8:	401a      	ands	r2, r3
 8000dca:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <__NVIC_EnableIRQ+0x30>)
 8000dcc:	2101      	movs	r1, #1
 8000dce:	4091      	lsls	r1, r2
 8000dd0:	000a      	movs	r2, r1
 8000dd2:	601a      	str	r2, [r3, #0]
}
 8000dd4:	46c0      	nop			; (mov r8, r8)
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	b002      	add	sp, #8
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	e000e100 	.word	0xe000e100

08000de0 <__NVIC_SetPriority>:
{
 8000de0:	b590      	push	{r4, r7, lr}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	0002      	movs	r2, r0
 8000de8:	6039      	str	r1, [r7, #0]
 8000dea:	1dfb      	adds	r3, r7, #7
 8000dec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dee:	1dfb      	adds	r3, r7, #7
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	2b7f      	cmp	r3, #127	; 0x7f
 8000df4:	d828      	bhi.n	8000e48 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000df6:	4a2f      	ldr	r2, [pc, #188]	; (8000eb4 <__NVIC_SetPriority+0xd4>)
 8000df8:	1dfb      	adds	r3, r7, #7
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	b25b      	sxtb	r3, r3
 8000dfe:	089b      	lsrs	r3, r3, #2
 8000e00:	33c0      	adds	r3, #192	; 0xc0
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	589b      	ldr	r3, [r3, r2]
 8000e06:	1dfa      	adds	r2, r7, #7
 8000e08:	7812      	ldrb	r2, [r2, #0]
 8000e0a:	0011      	movs	r1, r2
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	400a      	ands	r2, r1
 8000e10:	00d2      	lsls	r2, r2, #3
 8000e12:	21ff      	movs	r1, #255	; 0xff
 8000e14:	4091      	lsls	r1, r2
 8000e16:	000a      	movs	r2, r1
 8000e18:	43d2      	mvns	r2, r2
 8000e1a:	401a      	ands	r2, r3
 8000e1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	019b      	lsls	r3, r3, #6
 8000e22:	22ff      	movs	r2, #255	; 0xff
 8000e24:	401a      	ands	r2, r3
 8000e26:	1dfb      	adds	r3, r7, #7
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	4003      	ands	r3, r0
 8000e30:	00db      	lsls	r3, r3, #3
 8000e32:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e34:	481f      	ldr	r0, [pc, #124]	; (8000eb4 <__NVIC_SetPriority+0xd4>)
 8000e36:	1dfb      	adds	r3, r7, #7
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	b25b      	sxtb	r3, r3
 8000e3c:	089b      	lsrs	r3, r3, #2
 8000e3e:	430a      	orrs	r2, r1
 8000e40:	33c0      	adds	r3, #192	; 0xc0
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	501a      	str	r2, [r3, r0]
}
 8000e46:	e031      	b.n	8000eac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e48:	4a1b      	ldr	r2, [pc, #108]	; (8000eb8 <__NVIC_SetPriority+0xd8>)
 8000e4a:	1dfb      	adds	r3, r7, #7
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	0019      	movs	r1, r3
 8000e50:	230f      	movs	r3, #15
 8000e52:	400b      	ands	r3, r1
 8000e54:	3b08      	subs	r3, #8
 8000e56:	089b      	lsrs	r3, r3, #2
 8000e58:	3306      	adds	r3, #6
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	18d3      	adds	r3, r2, r3
 8000e5e:	3304      	adds	r3, #4
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	1dfa      	adds	r2, r7, #7
 8000e64:	7812      	ldrb	r2, [r2, #0]
 8000e66:	0011      	movs	r1, r2
 8000e68:	2203      	movs	r2, #3
 8000e6a:	400a      	ands	r2, r1
 8000e6c:	00d2      	lsls	r2, r2, #3
 8000e6e:	21ff      	movs	r1, #255	; 0xff
 8000e70:	4091      	lsls	r1, r2
 8000e72:	000a      	movs	r2, r1
 8000e74:	43d2      	mvns	r2, r2
 8000e76:	401a      	ands	r2, r3
 8000e78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	019b      	lsls	r3, r3, #6
 8000e7e:	22ff      	movs	r2, #255	; 0xff
 8000e80:	401a      	ands	r2, r3
 8000e82:	1dfb      	adds	r3, r7, #7
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	0018      	movs	r0, r3
 8000e88:	2303      	movs	r3, #3
 8000e8a:	4003      	ands	r3, r0
 8000e8c:	00db      	lsls	r3, r3, #3
 8000e8e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e90:	4809      	ldr	r0, [pc, #36]	; (8000eb8 <__NVIC_SetPriority+0xd8>)
 8000e92:	1dfb      	adds	r3, r7, #7
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	001c      	movs	r4, r3
 8000e98:	230f      	movs	r3, #15
 8000e9a:	4023      	ands	r3, r4
 8000e9c:	3b08      	subs	r3, #8
 8000e9e:	089b      	lsrs	r3, r3, #2
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	3306      	adds	r3, #6
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	18c3      	adds	r3, r0, r3
 8000ea8:	3304      	adds	r3, #4
 8000eaa:	601a      	str	r2, [r3, #0]
}
 8000eac:	46c0      	nop			; (mov r8, r8)
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	b003      	add	sp, #12
 8000eb2:	bd90      	pop	{r4, r7, pc}
 8000eb4:	e000e100 	.word	0xe000e100
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <LL_APB1_GRP1_EnableClock>:
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000ec4:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <LL_APB1_GRP1_EnableClock+0x28>)
 8000ec6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <LL_APB1_GRP1_EnableClock+0x28>)
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000ed0:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <LL_APB1_GRP1_EnableClock+0x28>)
 8000ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000eda:	68fb      	ldr	r3, [r7, #12]
}
 8000edc:	46c0      	nop			; (mov r8, r8)
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	b004      	add	sp, #16
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40021000 	.word	0x40021000

08000ee8 <LL_APB2_GRP1_EnableClock>:
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000ef0:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <LL_APB2_GRP1_EnableClock+0x28>)
 8000ef2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <LL_APB2_GRP1_EnableClock+0x28>)
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <LL_APB2_GRP1_EnableClock+0x28>)
 8000efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	4013      	ands	r3, r2
 8000f04:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f06:	68fb      	ldr	r3, [r7, #12]
}
 8000f08:	46c0      	nop			; (mov r8, r8)
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	b004      	add	sp, #16
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40021000 	.word	0x40021000

08000f14 <LL_IOP_GRP1_EnableClock>:
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8000f1c:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <LL_IOP_GRP1_EnableClock+0x28>)
 8000f1e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <LL_IOP_GRP1_EnableClock+0x28>)
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	430a      	orrs	r2, r1
 8000f26:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000f28:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <LL_IOP_GRP1_EnableClock+0x28>)
 8000f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f32:	68fb      	ldr	r3, [r7, #12]
}
 8000f34:	46c0      	nop			; (mov r8, r8)
 8000f36:	46bd      	mov	sp, r7
 8000f38:	b004      	add	sp, #16
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40021000 	.word	0x40021000

08000f40 <LL_TIM_DisableARRPreload>:
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2280      	movs	r2, #128	; 0x80
 8000f4e:	4393      	bics	r3, r2
 8000f50:	001a      	movs	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	601a      	str	r2, [r3, #0]
}
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	b002      	add	sp, #8
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <LL_TIM_OC_DisableFast>:
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d00d      	beq.n	8000f8c <LL_TIM_OC_DisableFast+0x2c>
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	2b10      	cmp	r3, #16
 8000f74:	d008      	beq.n	8000f88 <LL_TIM_OC_DisableFast+0x28>
 8000f76:	683a      	ldr	r2, [r7, #0]
 8000f78:	2380      	movs	r3, #128	; 0x80
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d101      	bne.n	8000f84 <LL_TIM_OC_DisableFast+0x24>
 8000f80:	2304      	movs	r3, #4
 8000f82:	e004      	b.n	8000f8e <LL_TIM_OC_DisableFast+0x2e>
 8000f84:	2306      	movs	r3, #6
 8000f86:	e002      	b.n	8000f8e <LL_TIM_OC_DisableFast+0x2e>
 8000f88:	2302      	movs	r3, #2
 8000f8a:	e000      	b.n	8000f8e <LL_TIM_OC_DisableFast+0x2e>
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	200f      	movs	r0, #15
 8000f90:	183a      	adds	r2, r7, r0
 8000f92:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3318      	adds	r3, #24
 8000f98:	0019      	movs	r1, r3
 8000f9a:	183b      	adds	r3, r7, r0
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <LL_TIM_OC_DisableFast+0x68>)
 8000fa0:	5cd3      	ldrb	r3, [r2, r3]
 8000fa2:	18cb      	adds	r3, r1, r3
 8000fa4:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	183a      	adds	r2, r7, r0
 8000fac:	7812      	ldrb	r2, [r2, #0]
 8000fae:	4907      	ldr	r1, [pc, #28]	; (8000fcc <LL_TIM_OC_DisableFast+0x6c>)
 8000fb0:	5c8a      	ldrb	r2, [r1, r2]
 8000fb2:	0011      	movs	r1, r2
 8000fb4:	2204      	movs	r2, #4
 8000fb6:	408a      	lsls	r2, r1
 8000fb8:	43d2      	mvns	r2, r2
 8000fba:	401a      	ands	r2, r3
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	601a      	str	r2, [r3, #0]
}
 8000fc0:	46c0      	nop			; (mov r8, r8)
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	b004      	add	sp, #16
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	0800226c 	.word	0x0800226c
 8000fcc:	08002274 	.word	0x08002274

08000fd0 <LL_TIM_OC_EnablePreload>:
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d00d      	beq.n	8000ffc <LL_TIM_OC_EnablePreload+0x2c>
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	2b10      	cmp	r3, #16
 8000fe4:	d008      	beq.n	8000ff8 <LL_TIM_OC_EnablePreload+0x28>
 8000fe6:	683a      	ldr	r2, [r7, #0]
 8000fe8:	2380      	movs	r3, #128	; 0x80
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d101      	bne.n	8000ff4 <LL_TIM_OC_EnablePreload+0x24>
 8000ff0:	2304      	movs	r3, #4
 8000ff2:	e004      	b.n	8000ffe <LL_TIM_OC_EnablePreload+0x2e>
 8000ff4:	2306      	movs	r3, #6
 8000ff6:	e002      	b.n	8000ffe <LL_TIM_OC_EnablePreload+0x2e>
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	e000      	b.n	8000ffe <LL_TIM_OC_EnablePreload+0x2e>
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	200f      	movs	r0, #15
 8001000:	183a      	adds	r2, r7, r0
 8001002:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3318      	adds	r3, #24
 8001008:	0019      	movs	r1, r3
 800100a:	183b      	adds	r3, r7, r0
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	4a0a      	ldr	r2, [pc, #40]	; (8001038 <LL_TIM_OC_EnablePreload+0x68>)
 8001010:	5cd3      	ldrb	r3, [r2, r3]
 8001012:	18cb      	adds	r3, r1, r3
 8001014:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	183b      	adds	r3, r7, r0
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	4907      	ldr	r1, [pc, #28]	; (800103c <LL_TIM_OC_EnablePreload+0x6c>)
 8001020:	5ccb      	ldrb	r3, [r1, r3]
 8001022:	0019      	movs	r1, r3
 8001024:	2308      	movs	r3, #8
 8001026:	408b      	lsls	r3, r1
 8001028:	431a      	orrs	r2, r3
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	601a      	str	r2, [r3, #0]
}
 800102e:	46c0      	nop			; (mov r8, r8)
 8001030:	46bd      	mov	sp, r7
 8001032:	b004      	add	sp, #16
 8001034:	bd80      	pop	{r7, pc}
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	0800226c 	.word	0x0800226c
 800103c:	08002274 	.word	0x08002274

08001040 <LL_TIM_SetClockSource>:
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	4a05      	ldr	r2, [pc, #20]	; (8001064 <LL_TIM_SetClockSource+0x24>)
 8001050:	401a      	ands	r2, r3
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	431a      	orrs	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	609a      	str	r2, [r3, #8]
}
 800105a:	46c0      	nop			; (mov r8, r8)
 800105c:	46bd      	mov	sp, r7
 800105e:	b002      	add	sp, #8
 8001060:	bd80      	pop	{r7, pc}
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	ffffbff8 	.word	0xffffbff8

08001068 <LL_TIM_SetTriggerOutput>:
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	2270      	movs	r2, #112	; 0x70
 8001078:	4393      	bics	r3, r2
 800107a:	001a      	movs	r2, r3
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	431a      	orrs	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	605a      	str	r2, [r3, #4]
}
 8001084:	46c0      	nop			; (mov r8, r8)
 8001086:	46bd      	mov	sp, r7
 8001088:	b002      	add	sp, #8
 800108a:	bd80      	pop	{r7, pc}

0800108c <LL_TIM_DisableMasterSlaveMode>:
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	2280      	movs	r2, #128	; 0x80
 800109a:	4393      	bics	r3, r2
 800109c:	001a      	movs	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	609a      	str	r2, [r3, #8]
}
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	46bd      	mov	sp, r7
 80010a6:	b002      	add	sp, #8
 80010a8:	bd80      	pop	{r7, pc}

080010aa <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80010aa:	b5b0      	push	{r4, r5, r7, lr}
 80010ac:	b08e      	sub	sp, #56	; 0x38
 80010ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80010b0:	2428      	movs	r4, #40	; 0x28
 80010b2:	193b      	adds	r3, r7, r4
 80010b4:	0018      	movs	r0, r3
 80010b6:	2310      	movs	r3, #16
 80010b8:	001a      	movs	r2, r3
 80010ba:	2100      	movs	r1, #0
 80010bc:	f001 f88c 	bl	80021d8 <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80010c0:	2518      	movs	r5, #24
 80010c2:	197b      	adds	r3, r7, r5
 80010c4:	0018      	movs	r0, r3
 80010c6:	2310      	movs	r3, #16
 80010c8:	001a      	movs	r2, r3
 80010ca:	2100      	movs	r1, #0
 80010cc:	f001 f884 	bl	80021d8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	003b      	movs	r3, r7
 80010d2:	0018      	movs	r0, r3
 80010d4:	2318      	movs	r3, #24
 80010d6:	001a      	movs	r2, r3
 80010d8:	2100      	movs	r1, #0
 80010da:	f001 f87d 	bl	80021d8 <memset>
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80010de:	2001      	movs	r0, #1
 80010e0:	f7ff feec 	bl	8000ebc <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 124;
 80010e4:	193b      	adds	r3, r7, r4
 80010e6:	227c      	movs	r2, #124	; 0x7c
 80010e8:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80010ea:	193b      	adds	r3, r7, r4
 80010ec:	2200      	movs	r2, #0
 80010ee:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 255;
 80010f0:	193b      	adds	r3, r7, r4
 80010f2:	22ff      	movs	r2, #255	; 0xff
 80010f4:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80010f6:	193b      	adds	r3, r7, r4
 80010f8:	2200      	movs	r2, #0
 80010fa:	60da      	str	r2, [r3, #12]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80010fc:	193a      	adds	r2, r7, r4
 80010fe:	2380      	movs	r3, #128	; 0x80
 8001100:	05db      	lsls	r3, r3, #23
 8001102:	0011      	movs	r1, r2
 8001104:	0018      	movs	r0, r3
 8001106:	f000 fd95 	bl	8001c34 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 800110a:	2380      	movs	r3, #128	; 0x80
 800110c:	05db      	lsls	r3, r3, #23
 800110e:	0018      	movs	r0, r3
 8001110:	f7ff ff16 	bl	8000f40 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001114:	2380      	movs	r3, #128	; 0x80
 8001116:	05db      	lsls	r3, r3, #23
 8001118:	2100      	movs	r1, #0
 800111a:	0018      	movs	r0, r3
 800111c:	f7ff ff90 	bl	8001040 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8001120:	2380      	movs	r3, #128	; 0x80
 8001122:	05db      	lsls	r3, r3, #23
 8001124:	2101      	movs	r1, #1
 8001126:	0018      	movs	r0, r3
 8001128:	f7ff ff52 	bl	8000fd0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800112c:	0029      	movs	r1, r5
 800112e:	187b      	adds	r3, r7, r1
 8001130:	2260      	movs	r2, #96	; 0x60
 8001132:	601a      	str	r2, [r3, #0]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001134:	187b      	adds	r3, r7, r1
 8001136:	2200      	movs	r2, #0
 8001138:	605a      	str	r2, [r3, #4]
  TIM_OC_InitStruct.CompareValue = 0;
 800113a:	187b      	adds	r3, r7, r1
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001140:	187b      	adds	r3, r7, r1
 8001142:	2200      	movs	r2, #0
 8001144:	60da      	str	r2, [r3, #12]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001146:	187a      	adds	r2, r7, r1
 8001148:	2380      	movs	r3, #128	; 0x80
 800114a:	05db      	lsls	r3, r3, #23
 800114c:	2101      	movs	r1, #1
 800114e:	0018      	movs	r0, r3
 8001150:	f000 fdb8 	bl	8001cc4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8001154:	2380      	movs	r3, #128	; 0x80
 8001156:	05db      	lsls	r3, r3, #23
 8001158:	2101      	movs	r1, #1
 800115a:	0018      	movs	r0, r3
 800115c:	f7ff ff00 	bl	8000f60 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8001160:	2380      	movs	r3, #128	; 0x80
 8001162:	05db      	lsls	r3, r3, #23
 8001164:	2100      	movs	r1, #0
 8001166:	0018      	movs	r0, r3
 8001168:	f7ff ff7e 	bl	8001068 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 800116c:	2380      	movs	r3, #128	; 0x80
 800116e:	05db      	lsls	r3, r3, #23
 8001170:	0018      	movs	r0, r3
 8001172:	f7ff ff8b 	bl	800108c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8001176:	2001      	movs	r0, #1
 8001178:	f7ff fecc 	bl	8000f14 <LL_IOP_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA8     ------> TIM2_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 800117c:	003b      	movs	r3, r7
 800117e:	2280      	movs	r2, #128	; 0x80
 8001180:	0052      	lsls	r2, r2, #1
 8001182:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001184:	003b      	movs	r3, r7
 8001186:	2202      	movs	r2, #2
 8001188:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800118a:	003b      	movs	r3, r7
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001190:	003b      	movs	r3, r7
 8001192:	2200      	movs	r2, #0
 8001194:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001196:	003b      	movs	r3, r7
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800119c:	003b      	movs	r3, r7
 800119e:	2205      	movs	r2, #5
 80011a0:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a2:	003a      	movs	r2, r7
 80011a4:	23a0      	movs	r3, #160	; 0xa0
 80011a6:	05db      	lsls	r3, r3, #23
 80011a8:	0011      	movs	r1, r2
 80011aa:	0018      	movs	r0, r3
 80011ac:	f000 fa81 	bl	80016b2 <LL_GPIO_Init>

}
 80011b0:	46c0      	nop			; (mov r8, r8)
 80011b2:	46bd      	mov	sp, r7
 80011b4:	b00e      	add	sp, #56	; 0x38
 80011b6:	bdb0      	pop	{r4, r5, r7, pc}

080011b8 <MX_TIM21_Init>:
/* TIM21 init function */
void MX_TIM21_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80011be:	003b      	movs	r3, r7
 80011c0:	0018      	movs	r0, r3
 80011c2:	2310      	movs	r3, #16
 80011c4:	001a      	movs	r2, r3
 80011c6:	2100      	movs	r1, #0
 80011c8:	f001 f806 	bl	80021d8 <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM21);
 80011cc:	2004      	movs	r0, #4
 80011ce:	f7ff fe8b 	bl	8000ee8 <LL_APB2_GRP1_EnableClock>

  /* TIM21 interrupt Init */
  NVIC_SetPriority(TIM21_IRQn, 0);
 80011d2:	2100      	movs	r1, #0
 80011d4:	2014      	movs	r0, #20
 80011d6:	f7ff fe03 	bl	8000de0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM21_IRQn);
 80011da:	2014      	movs	r0, #20
 80011dc:	f7ff fde6 	bl	8000dac <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80011e0:	003b      	movs	r3, r7
 80011e2:	2200      	movs	r2, #0
 80011e4:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80011e6:	003b      	movs	r3, r7
 80011e8:	2200      	movs	r2, #0
 80011ea:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 31999;
 80011ec:	003b      	movs	r3, r7
 80011ee:	4a10      	ldr	r2, [pc, #64]	; (8001230 <MX_TIM21_Init+0x78>)
 80011f0:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80011f2:	003b      	movs	r3, r7
 80011f4:	2200      	movs	r2, #0
 80011f6:	60da      	str	r2, [r3, #12]
  LL_TIM_Init(TIM21, &TIM_InitStruct);
 80011f8:	003b      	movs	r3, r7
 80011fa:	4a0e      	ldr	r2, [pc, #56]	; (8001234 <MX_TIM21_Init+0x7c>)
 80011fc:	0019      	movs	r1, r3
 80011fe:	0010      	movs	r0, r2
 8001200:	f000 fd18 	bl	8001c34 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM21);
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <MX_TIM21_Init+0x7c>)
 8001206:	0018      	movs	r0, r3
 8001208:	f7ff fe9a 	bl	8000f40 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM21, LL_TIM_CLOCKSOURCE_INTERNAL);
 800120c:	4b09      	ldr	r3, [pc, #36]	; (8001234 <MX_TIM21_Init+0x7c>)
 800120e:	2100      	movs	r1, #0
 8001210:	0018      	movs	r0, r3
 8001212:	f7ff ff15 	bl	8001040 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM21, LL_TIM_TRGO_RESET);
 8001216:	4b07      	ldr	r3, [pc, #28]	; (8001234 <MX_TIM21_Init+0x7c>)
 8001218:	2100      	movs	r1, #0
 800121a:	0018      	movs	r0, r3
 800121c:	f7ff ff24 	bl	8001068 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM21);
 8001220:	4b04      	ldr	r3, [pc, #16]	; (8001234 <MX_TIM21_Init+0x7c>)
 8001222:	0018      	movs	r0, r3
 8001224:	f7ff ff32 	bl	800108c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8001228:	46c0      	nop			; (mov r8, r8)
 800122a:	46bd      	mov	sp, r7
 800122c:	b004      	add	sp, #16
 800122e:	bd80      	pop	{r7, pc}
 8001230:	00007cff 	.word	0x00007cff
 8001234:	40010800 	.word	0x40010800

08001238 <LL_APB1_GRP1_EnableClock>:
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001240:	4b07      	ldr	r3, [pc, #28]	; (8001260 <LL_APB1_GRP1_EnableClock+0x28>)
 8001242:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001244:	4b06      	ldr	r3, [pc, #24]	; (8001260 <LL_APB1_GRP1_EnableClock+0x28>)
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	430a      	orrs	r2, r1
 800124a:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800124c:	4b04      	ldr	r3, [pc, #16]	; (8001260 <LL_APB1_GRP1_EnableClock+0x28>)
 800124e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	4013      	ands	r3, r2
 8001254:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001256:	68fb      	ldr	r3, [r7, #12]
}
 8001258:	46c0      	nop			; (mov r8, r8)
 800125a:	46bd      	mov	sp, r7
 800125c:	b004      	add	sp, #16
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40021000 	.word	0x40021000

08001264 <LL_IOP_GRP1_EnableClock>:
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 800126c:	4b07      	ldr	r3, [pc, #28]	; (800128c <LL_IOP_GRP1_EnableClock+0x28>)
 800126e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <LL_IOP_GRP1_EnableClock+0x28>)
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	430a      	orrs	r2, r1
 8001276:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8001278:	4b04      	ldr	r3, [pc, #16]	; (800128c <LL_IOP_GRP1_EnableClock+0x28>)
 800127a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	4013      	ands	r3, r2
 8001280:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001282:	68fb      	ldr	r3, [r7, #12]
}
 8001284:	46c0      	nop			; (mov r8, r8)
 8001286:	46bd      	mov	sp, r7
 8001288:	b004      	add	sp, #16
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40021000 	.word	0x40021000

08001290 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2201      	movs	r2, #1
 800129e:	431a      	orrs	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	601a      	str	r2, [r3, #0]
}
 80012a4:	46c0      	nop			; (mov r8, r8)
 80012a6:	46bd      	mov	sp, r7
 80012a8:	b002      	add	sp, #8
 80012aa:	bd80      	pop	{r7, pc}

080012ac <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	4a07      	ldr	r2, [pc, #28]	; (80012d8 <LL_USART_ConfigAsyncMode+0x2c>)
 80012ba:	401a      	ands	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	222a      	movs	r2, #42	; 0x2a
 80012c6:	4393      	bics	r3, r2
 80012c8:	001a      	movs	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	609a      	str	r2, [r3, #8]
}
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	46bd      	mov	sp, r7
 80012d2:	b002      	add	sp, #8
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	46c0      	nop			; (mov r8, r8)
 80012d8:	ffffb7ff 	.word	0xffffb7ff

080012dc <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80012dc:	b590      	push	{r4, r7, lr}
 80012de:	b08f      	sub	sp, #60	; 0x3c
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80012e2:	241c      	movs	r4, #28
 80012e4:	193b      	adds	r3, r7, r4
 80012e6:	0018      	movs	r0, r3
 80012e8:	231c      	movs	r3, #28
 80012ea:	001a      	movs	r2, r3
 80012ec:	2100      	movs	r1, #0
 80012ee:	f000 ff73 	bl	80021d8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	0018      	movs	r0, r3
 80012f6:	2318      	movs	r3, #24
 80012f8:	001a      	movs	r2, r3
 80012fa:	2100      	movs	r1, #0
 80012fc:	f000 ff6c 	bl	80021d8 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001300:	2380      	movs	r3, #128	; 0x80
 8001302:	029b      	lsls	r3, r3, #10
 8001304:	0018      	movs	r0, r3
 8001306:	f7ff ff97 	bl	8001238 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 800130a:	2001      	movs	r0, #1
 800130c:	f7ff ffaa 	bl	8001264 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA0-CK_IN   ------> USART2_RX
  PA2   ------> USART2_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8001310:	1d3b      	adds	r3, r7, #4
 8001312:	2201      	movs	r2, #1
 8001314:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	2202      	movs	r2, #2
 800131a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	2203      	movs	r2, #3
 8001320:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	2200      	movs	r2, #0
 8001326:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	2200      	movs	r2, #0
 800132c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	2200      	movs	r2, #0
 8001332:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001334:	1d3a      	adds	r2, r7, #4
 8001336:	23a0      	movs	r3, #160	; 0xa0
 8001338:	05db      	lsls	r3, r3, #23
 800133a:	0011      	movs	r1, r2
 800133c:	0018      	movs	r0, r3
 800133e:	f000 f9b8 	bl	80016b2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	2204      	movs	r2, #4
 8001346:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001348:	1d3b      	adds	r3, r7, #4
 800134a:	2202      	movs	r2, #2
 800134c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800134e:	1d3b      	adds	r3, r7, #4
 8001350:	2203      	movs	r2, #3
 8001352:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	2200      	movs	r2, #0
 8001358:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001360:	1d3b      	adds	r3, r7, #4
 8001362:	2204      	movs	r2, #4
 8001364:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001366:	1d3a      	adds	r2, r7, #4
 8001368:	23a0      	movs	r3, #160	; 0xa0
 800136a:	05db      	lsls	r3, r3, #23
 800136c:	0011      	movs	r1, r2
 800136e:	0018      	movs	r0, r3
 8001370:	f000 f99f 	bl	80016b2 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001374:	193b      	adds	r3, r7, r4
 8001376:	22e1      	movs	r2, #225	; 0xe1
 8001378:	0252      	lsls	r2, r2, #9
 800137a:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800137c:	0021      	movs	r1, r4
 800137e:	187b      	adds	r3, r7, r1
 8001380:	2200      	movs	r2, #0
 8001382:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001384:	187b      	adds	r3, r7, r1
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800138a:	187b      	adds	r3, r7, r1
 800138c:	2200      	movs	r2, #0
 800138e:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001390:	187b      	adds	r3, r7, r1
 8001392:	220c      	movs	r2, #12
 8001394:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001396:	187b      	adds	r3, r7, r1
 8001398:	2200      	movs	r2, #0
 800139a:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800139c:	187b      	adds	r3, r7, r1
 800139e:	2200      	movs	r2, #0
 80013a0:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART2, &USART_InitStruct);
 80013a2:	187b      	adds	r3, r7, r1
 80013a4:	4a08      	ldr	r2, [pc, #32]	; (80013c8 <MX_USART2_UART_Init+0xec>)
 80013a6:	0019      	movs	r1, r3
 80013a8:	0010      	movs	r0, r2
 80013aa:	f000 fe85 	bl	80020b8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <MX_USART2_UART_Init+0xec>)
 80013b0:	0018      	movs	r0, r3
 80013b2:	f7ff ff7b 	bl	80012ac <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80013b6:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <MX_USART2_UART_Init+0xec>)
 80013b8:	0018      	movs	r0, r3
 80013ba:	f7ff ff69 	bl	8001290 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	46bd      	mov	sp, r7
 80013c2:	b00f      	add	sp, #60	; 0x3c
 80013c4:	bd90      	pop	{r4, r7, pc}
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	40004400 	.word	0x40004400

080013cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80013cc:	4813      	ldr	r0, [pc, #76]	; (800141c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80013ce:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80013d0:	f7ff fce6 	bl	8000da0 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 80013d4:	4812      	ldr	r0, [pc, #72]	; (8001420 <LoopForever+0x6>)
    LDR R1, [R0]
 80013d6:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80013d8:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80013da:	4a12      	ldr	r2, [pc, #72]	; (8001424 <LoopForever+0xa>)
    CMP R1, R2
 80013dc:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80013de:	d105      	bne.n	80013ec <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 80013e0:	4811      	ldr	r0, [pc, #68]	; (8001428 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80013e2:	4912      	ldr	r1, [pc, #72]	; (800142c <LoopForever+0x12>)
    STR R1, [R0]
 80013e4:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80013e6:	4812      	ldr	r0, [pc, #72]	; (8001430 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80013e8:	4912      	ldr	r1, [pc, #72]	; (8001434 <LoopForever+0x1a>)
    STR R1, [R0]
 80013ea:	6001      	str	r1, [r0, #0]

080013ec <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013ec:	4812      	ldr	r0, [pc, #72]	; (8001438 <LoopForever+0x1e>)
  ldr r1, =_edata
 80013ee:	4913      	ldr	r1, [pc, #76]	; (800143c <LoopForever+0x22>)
  ldr r2, =_sidata
 80013f0:	4a13      	ldr	r2, [pc, #76]	; (8001440 <LoopForever+0x26>)
  movs r3, #0
 80013f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013f4:	e002      	b.n	80013fc <LoopCopyDataInit>

080013f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013fa:	3304      	adds	r3, #4

080013fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001400:	d3f9      	bcc.n	80013f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001402:	4a10      	ldr	r2, [pc, #64]	; (8001444 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001404:	4c10      	ldr	r4, [pc, #64]	; (8001448 <LoopForever+0x2e>)
  movs r3, #0
 8001406:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001408:	e001      	b.n	800140e <LoopFillZerobss>

0800140a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800140a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800140c:	3204      	adds	r2, #4

0800140e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800140e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001410:	d3fb      	bcc.n	800140a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001412:	f000 fee9 	bl	80021e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001416:	f7ff fb43 	bl	8000aa0 <main>

0800141a <LoopForever>:

LoopForever:
    b LoopForever
 800141a:	e7fe      	b.n	800141a <LoopForever>
   ldr   r0, =_estack
 800141c:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8001420:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001424:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8001428:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 800142c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001430:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001434:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001438:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800143c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001440:	08002284 	.word	0x08002284
  ldr r2, =_sbss
 8001444:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001448:	20000028 	.word	0x20000028

0800144c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800144c:	e7fe      	b.n	800144c <ADC1_COMP_IRQHandler>

0800144e <LL_ADC_IsEnabled>:
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b082      	sub	sp, #8
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	2201      	movs	r2, #1
 800145c:	4013      	ands	r3, r2
 800145e:	3b01      	subs	r3, #1
 8001460:	425a      	negs	r2, r3
 8001462:	4153      	adcs	r3, r2
 8001464:	b2db      	uxtb	r3, r3
}
 8001466:	0018      	movs	r0, r3
 8001468:	46bd      	mov	sp, r7
 800146a:	b002      	add	sp, #8
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800147a:	230f      	movs	r3, #15
 800147c:	18fb      	adds	r3, r7, r3
 800147e:	2200      	movs	r2, #0
 8001480:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0U)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	0018      	movs	r0, r3
 8001486:	f7ff ffe2 	bl	800144e <LL_ADC_IsEnabled>
 800148a:	1e03      	subs	r3, r0, #0
 800148c:	d118      	bne.n	80014c0 <LL_ADC_Init+0x50>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR1,
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	4a11      	ldr	r2, [pc, #68]	; (80014d8 <LL_ADC_Init+0x68>)
 8001494:	401a      	ands	r2, r3
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	6859      	ldr	r1, [r3, #4]
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	4319      	orrs	r1, r3
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	430b      	orrs	r3, r1
 80014a6:	431a      	orrs	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	60da      	str	r2, [r3, #12]
               ADC_InitStruct->Resolution
               | ADC_InitStruct->DataAlignment
               | ADC_InitStruct->LowPowerMode
              );

    MODIFY_REG(ADCx->CFGR2,
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	691b      	ldr	r3, [r3, #16]
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	089a      	lsrs	r2, r3, #2
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	431a      	orrs	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	611a      	str	r2, [r3, #16]
 80014be:	e003      	b.n	80014c8 <LL_ADC_Init+0x58>
              );
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80014c0:	230f      	movs	r3, #15
 80014c2:	18fb      	adds	r3, r7, r3
 80014c4:	2201      	movs	r2, #1
 80014c6:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80014c8:	230f      	movs	r3, #15
 80014ca:	18fb      	adds	r3, r7, r3
 80014cc:	781b      	ldrb	r3, [r3, #0]
}
 80014ce:	0018      	movs	r0, r3
 80014d0:	46bd      	mov	sp, r7
 80014d2:	b004      	add	sp, #16
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	ffff3fc7 	.word	0xffff3fc7

080014dc <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80014e6:	230f      	movs	r3, #15
 80014e8:	18fb      	adds	r3, r7, r3
 80014ea:	2200      	movs	r2, #0
 80014ec:	701a      	strb	r2, [r3, #0]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0U)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	0018      	movs	r0, r3
 80014f2:	f7ff ffac 	bl	800144e <LL_ADC_IsEnabled>
 80014f6:	1e03      	subs	r3, r0, #0
 80014f8:	d115      	bne.n	8001526 <LL_ADC_REG_Init+0x4a>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    MODIFY_REG(ADCx->CFGR1,
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	4a0f      	ldr	r2, [pc, #60]	; (800153c <LL_ADC_REG_Init+0x60>)
 8001500:	401a      	ands	r2, r3
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	6819      	ldr	r1, [r3, #0]
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	4319      	orrs	r1, r3
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	4319      	orrs	r1, r3
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	4319      	orrs	r1, r3
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	691b      	ldr	r3, [r3, #16]
 800151c:	430b      	orrs	r3, r1
 800151e:	431a      	orrs	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	60da      	str	r2, [r3, #12]
 8001524:	e003      	b.n	800152e <LL_ADC_REG_Init+0x52>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001526:	230f      	movs	r3, #15
 8001528:	18fb      	adds	r3, r7, r3
 800152a:	2201      	movs	r2, #1
 800152c:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800152e:	230f      	movs	r3, #15
 8001530:	18fb      	adds	r3, r7, r3
 8001532:	781b      	ldrb	r3, [r3, #0]
}
 8001534:	0018      	movs	r0, r3
 8001536:	46bd      	mov	sp, r7
 8001538:	b004      	add	sp, #16
 800153a:	bd80      	pop	{r7, pc}
 800153c:	fffec23c 	.word	0xfffec23c

08001540 <LL_GPIO_SetPinMode>:
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	6819      	ldr	r1, [r3, #0]
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	435b      	muls	r3, r3
 8001554:	001a      	movs	r2, r3
 8001556:	0013      	movs	r3, r2
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	189b      	adds	r3, r3, r2
 800155c:	43db      	mvns	r3, r3
 800155e:	400b      	ands	r3, r1
 8001560:	001a      	movs	r2, r3
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	435b      	muls	r3, r3
 8001566:	6879      	ldr	r1, [r7, #4]
 8001568:	434b      	muls	r3, r1
 800156a:	431a      	orrs	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	601a      	str	r2, [r3, #0]
}
 8001570:	46c0      	nop			; (mov r8, r8)
 8001572:	46bd      	mov	sp, r7
 8001574:	b004      	add	sp, #16
 8001576:	bd80      	pop	{r7, pc}

08001578 <LL_GPIO_SetPinOutputType>:
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	68ba      	ldr	r2, [r7, #8]
 800158a:	43d2      	mvns	r2, r2
 800158c:	401a      	ands	r2, r3
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	6879      	ldr	r1, [r7, #4]
 8001592:	434b      	muls	r3, r1
 8001594:	431a      	orrs	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	605a      	str	r2, [r3, #4]
}
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	46bd      	mov	sp, r7
 800159e:	b004      	add	sp, #16
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <LL_GPIO_SetPinSpeed>:
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b084      	sub	sp, #16
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	60f8      	str	r0, [r7, #12]
 80015aa:	60b9      	str	r1, [r7, #8]
 80015ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6899      	ldr	r1, [r3, #8]
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	435b      	muls	r3, r3
 80015b6:	001a      	movs	r2, r3
 80015b8:	0013      	movs	r3, r2
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	189b      	adds	r3, r3, r2
 80015be:	43db      	mvns	r3, r3
 80015c0:	400b      	ands	r3, r1
 80015c2:	001a      	movs	r2, r3
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	435b      	muls	r3, r3
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	434b      	muls	r3, r1
 80015cc:	431a      	orrs	r2, r3
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	609a      	str	r2, [r3, #8]
}
 80015d2:	46c0      	nop			; (mov r8, r8)
 80015d4:	46bd      	mov	sp, r7
 80015d6:	b004      	add	sp, #16
 80015d8:	bd80      	pop	{r7, pc}

080015da <LL_GPIO_SetPinPull>:
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b084      	sub	sp, #16
 80015de:	af00      	add	r7, sp, #0
 80015e0:	60f8      	str	r0, [r7, #12]
 80015e2:	60b9      	str	r1, [r7, #8]
 80015e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	68d9      	ldr	r1, [r3, #12]
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	435b      	muls	r3, r3
 80015ee:	001a      	movs	r2, r3
 80015f0:	0013      	movs	r3, r2
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	189b      	adds	r3, r3, r2
 80015f6:	43db      	mvns	r3, r3
 80015f8:	400b      	ands	r3, r1
 80015fa:	001a      	movs	r2, r3
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	435b      	muls	r3, r3
 8001600:	6879      	ldr	r1, [r7, #4]
 8001602:	434b      	muls	r3, r1
 8001604:	431a      	orrs	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	60da      	str	r2, [r3, #12]
}
 800160a:	46c0      	nop			; (mov r8, r8)
 800160c:	46bd      	mov	sp, r7
 800160e:	b004      	add	sp, #16
 8001610:	bd80      	pop	{r7, pc}

08001612 <LL_GPIO_SetAFPin_0_7>:
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b084      	sub	sp, #16
 8001616:	af00      	add	r7, sp, #0
 8001618:	60f8      	str	r0, [r7, #12]
 800161a:	60b9      	str	r1, [r7, #8]
 800161c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	6a19      	ldr	r1, [r3, #32]
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	435b      	muls	r3, r3
 8001626:	68ba      	ldr	r2, [r7, #8]
 8001628:	4353      	muls	r3, r2
 800162a:	68ba      	ldr	r2, [r7, #8]
 800162c:	435a      	muls	r2, r3
 800162e:	0013      	movs	r3, r2
 8001630:	011b      	lsls	r3, r3, #4
 8001632:	1a9b      	subs	r3, r3, r2
 8001634:	43db      	mvns	r3, r3
 8001636:	400b      	ands	r3, r1
 8001638:	001a      	movs	r2, r3
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	435b      	muls	r3, r3
 800163e:	68b9      	ldr	r1, [r7, #8]
 8001640:	434b      	muls	r3, r1
 8001642:	68b9      	ldr	r1, [r7, #8]
 8001644:	434b      	muls	r3, r1
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	434b      	muls	r3, r1
 800164a:	431a      	orrs	r2, r3
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	621a      	str	r2, [r3, #32]
}
 8001650:	46c0      	nop			; (mov r8, r8)
 8001652:	46bd      	mov	sp, r7
 8001654:	b004      	add	sp, #16
 8001656:	bd80      	pop	{r7, pc}

08001658 <LL_GPIO_SetAFPin_8_15>:
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	0a1b      	lsrs	r3, r3, #8
 800166c:	68ba      	ldr	r2, [r7, #8]
 800166e:	0a12      	lsrs	r2, r2, #8
 8001670:	4353      	muls	r3, r2
 8001672:	68ba      	ldr	r2, [r7, #8]
 8001674:	0a12      	lsrs	r2, r2, #8
 8001676:	4353      	muls	r3, r2
 8001678:	68ba      	ldr	r2, [r7, #8]
 800167a:	0a12      	lsrs	r2, r2, #8
 800167c:	435a      	muls	r2, r3
 800167e:	0013      	movs	r3, r2
 8001680:	011b      	lsls	r3, r3, #4
 8001682:	1a9b      	subs	r3, r3, r2
 8001684:	43db      	mvns	r3, r3
 8001686:	400b      	ands	r3, r1
 8001688:	001a      	movs	r2, r3
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	0a1b      	lsrs	r3, r3, #8
 800168e:	68b9      	ldr	r1, [r7, #8]
 8001690:	0a09      	lsrs	r1, r1, #8
 8001692:	434b      	muls	r3, r1
 8001694:	68b9      	ldr	r1, [r7, #8]
 8001696:	0a09      	lsrs	r1, r1, #8
 8001698:	434b      	muls	r3, r1
 800169a:	68b9      	ldr	r1, [r7, #8]
 800169c:	0a09      	lsrs	r1, r1, #8
 800169e:	434b      	muls	r3, r1
 80016a0:	6879      	ldr	r1, [r7, #4]
 80016a2:	434b      	muls	r3, r1
 80016a4:	431a      	orrs	r2, r3
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	46bd      	mov	sp, r7
 80016ae:	b004      	add	sp, #16
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b084      	sub	sp, #16
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
 80016ba:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80016bc:	2300      	movs	r3, #0
 80016be:	60fb      	str	r3, [r7, #12]
  uint32_t currentpin = 0x00000000U;
 80016c0:	2300      	movs	r3, #0
 80016c2:	60bb      	str	r3, [r7, #8]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80016c4:	e048      	b.n	8001758 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2101      	movs	r1, #1
 80016cc:	68fa      	ldr	r2, [r7, #12]
 80016ce:	4091      	lsls	r1, r2
 80016d0:	000a      	movs	r2, r1
 80016d2:	4013      	ands	r3, r2
 80016d4:	60bb      	str	r3, [r7, #8]

    if (currentpin)
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d03a      	beq.n	8001752 <LL_GPIO_Init+0xa0>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d003      	beq.n	80016ec <LL_GPIO_Init+0x3a>
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d10e      	bne.n	800170a <LL_GPIO_Init+0x58>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	689a      	ldr	r2, [r3, #8]
 80016f0:	68b9      	ldr	r1, [r7, #8]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	0018      	movs	r0, r3
 80016f6:	f7ff ff54 	bl	80015a2 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	6819      	ldr	r1, [r3, #0]
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	68da      	ldr	r2, [r3, #12]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	0018      	movs	r0, r3
 8001706:	f7ff ff37 	bl	8001578 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	691a      	ldr	r2, [r3, #16]
 800170e:	68b9      	ldr	r1, [r7, #8]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	0018      	movs	r0, r3
 8001714:	f7ff ff61 	bl	80015da <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	2b02      	cmp	r3, #2
 800171e:	d111      	bne.n	8001744 <LL_GPIO_Init+0x92>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	2bff      	cmp	r3, #255	; 0xff
 8001724:	d807      	bhi.n	8001736 <LL_GPIO_Init+0x84>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	695a      	ldr	r2, [r3, #20]
 800172a:	68b9      	ldr	r1, [r7, #8]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	0018      	movs	r0, r3
 8001730:	f7ff ff6f 	bl	8001612 <LL_GPIO_SetAFPin_0_7>
 8001734:	e006      	b.n	8001744 <LL_GPIO_Init+0x92>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	695a      	ldr	r2, [r3, #20]
 800173a:	68b9      	ldr	r1, [r7, #8]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	0018      	movs	r0, r3
 8001740:	f7ff ff8a 	bl	8001658 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685a      	ldr	r2, [r3, #4]
 8001748:	68b9      	ldr	r1, [r7, #8]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	0018      	movs	r0, r3
 800174e:	f7ff fef7 	bl	8001540 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	3301      	adds	r3, #1
 8001756:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	40da      	lsrs	r2, r3
 8001760:	1e13      	subs	r3, r2, #0
 8001762:	d1b0      	bne.n	80016c6 <LL_GPIO_Init+0x14>
  }


  return (SUCCESS);
 8001764:	2300      	movs	r3, #0
}
 8001766:	0018      	movs	r0, r3
 8001768:	46bd      	mov	sp, r7
 800176a:	b004      	add	sp, #16
 800176c:	bd80      	pop	{r7, pc}
	...

08001770 <LL_RCC_HSI_IsReady>:
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <LL_RCC_HSI_IsReady+0x1c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2204      	movs	r2, #4
 800177a:	4013      	ands	r3, r2
 800177c:	2b04      	cmp	r3, #4
 800177e:	d101      	bne.n	8001784 <LL_RCC_HSI_IsReady+0x14>
 8001780:	2301      	movs	r3, #1
 8001782:	e000      	b.n	8001786 <LL_RCC_HSI_IsReady+0x16>
 8001784:	2300      	movs	r3, #0
}
 8001786:	0018      	movs	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40021000 	.word	0x40021000

08001790 <LL_RCC_LSE_IsReady>:
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 8001794:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <LL_RCC_LSE_IsReady+0x24>)
 8001796:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001798:	2380      	movs	r3, #128	; 0x80
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	401a      	ands	r2, r3
 800179e:	2380      	movs	r3, #128	; 0x80
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d101      	bne.n	80017aa <LL_RCC_LSE_IsReady+0x1a>
 80017a6:	2301      	movs	r3, #1
 80017a8:	e000      	b.n	80017ac <LL_RCC_LSE_IsReady+0x1c>
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	0018      	movs	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	46c0      	nop			; (mov r8, r8)
 80017b4:	40021000 	.word	0x40021000

080017b8 <LL_RCC_MSI_GetRange>:
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE));
 80017bc:	4b03      	ldr	r3, [pc, #12]	; (80017cc <LL_RCC_MSI_GetRange+0x14>)
 80017be:	685a      	ldr	r2, [r3, #4]
 80017c0:	23e0      	movs	r3, #224	; 0xe0
 80017c2:	021b      	lsls	r3, r3, #8
 80017c4:	4013      	ands	r3, r2
}
 80017c6:	0018      	movs	r0, r3
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40021000 	.word	0x40021000

080017d0 <LL_RCC_GetSysClkSource>:
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80017d4:	4b03      	ldr	r3, [pc, #12]	; (80017e4 <LL_RCC_GetSysClkSource+0x14>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	220c      	movs	r2, #12
 80017da:	4013      	ands	r3, r2
}
 80017dc:	0018      	movs	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	46c0      	nop			; (mov r8, r8)
 80017e4:	40021000 	.word	0x40021000

080017e8 <LL_RCC_GetAHBPrescaler>:
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80017ec:	4b03      	ldr	r3, [pc, #12]	; (80017fc <LL_RCC_GetAHBPrescaler+0x14>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	22f0      	movs	r2, #240	; 0xf0
 80017f2:	4013      	ands	r3, r2
}
 80017f4:	0018      	movs	r0, r3
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	46c0      	nop			; (mov r8, r8)
 80017fc:	40021000 	.word	0x40021000

08001800 <LL_RCC_GetAPB1Prescaler>:
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001804:	4b03      	ldr	r3, [pc, #12]	; (8001814 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001806:	68da      	ldr	r2, [r3, #12]
 8001808:	23e0      	movs	r3, #224	; 0xe0
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	4013      	ands	r3, r2
}
 800180e:	0018      	movs	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40021000 	.word	0x40021000

08001818 <LL_RCC_GetUSARTClockSource>:
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8001820:	4b05      	ldr	r3, [pc, #20]	; (8001838 <LL_RCC_GetUSARTClockSource+0x20>)
 8001822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	401a      	ands	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	041b      	lsls	r3, r3, #16
 800182c:	4313      	orrs	r3, r2
}
 800182e:	0018      	movs	r0, r3
 8001830:	46bd      	mov	sp, r7
 8001832:	b002      	add	sp, #8
 8001834:	bd80      	pop	{r7, pc}
 8001836:	46c0      	nop			; (mov r8, r8)
 8001838:	40021000 	.word	0x40021000

0800183c <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001840:	4b03      	ldr	r3, [pc, #12]	; (8001850 <LL_RCC_PLL_GetMainSource+0x14>)
 8001842:	68da      	ldr	r2, [r3, #12]
 8001844:	2380      	movs	r3, #128	; 0x80
 8001846:	025b      	lsls	r3, r3, #9
 8001848:	4013      	ands	r3, r2
}
 800184a:	0018      	movs	r0, r3
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40021000 	.word	0x40021000

08001854 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_24
  *         @arg @ref LL_RCC_PLL_MUL_32
  *         @arg @ref LL_RCC_PLL_MUL_48
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8001858:	4b03      	ldr	r3, [pc, #12]	; (8001868 <LL_RCC_PLL_GetMultiplicator+0x14>)
 800185a:	68da      	ldr	r2, [r3, #12]
 800185c:	23f0      	movs	r3, #240	; 0xf0
 800185e:	039b      	lsls	r3, r3, #14
 8001860:	4013      	ands	r3, r2
}
 8001862:	0018      	movs	r0, r3
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40021000 	.word	0x40021000

0800186c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLL_DIV_2
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLDIV));
 8001870:	4b03      	ldr	r3, [pc, #12]	; (8001880 <LL_RCC_PLL_GetDivider+0x14>)
 8001872:	68da      	ldr	r2, [r3, #12]
 8001874:	23c0      	movs	r3, #192	; 0xc0
 8001876:	041b      	lsls	r3, r3, #16
 8001878:	4013      	ands	r3, r2
}
 800187a:	0018      	movs	r0, r3
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40021000 	.word	0x40021000

08001884 <LL_RCC_IsActiveFlag_HSIDIV>:
  * @brief  Check if HSI Divider is enabled (it divides by 4)
  * @rmtoll CR        HSIDIVF        LL_RCC_IsActiveFlag_HSIDIV
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HSIDIV(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 8001888:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <LL_RCC_IsActiveFlag_HSIDIV+0x1c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2210      	movs	r2, #16
 800188e:	4013      	ands	r3, r2
 8001890:	2b10      	cmp	r3, #16
 8001892:	d101      	bne.n	8001898 <LL_RCC_IsActiveFlag_HSIDIV+0x14>
 8001894:	2301      	movs	r3, #1
 8001896:	e000      	b.n	800189a <LL_RCC_IsActiveFlag_HSIDIV+0x16>
 8001898:	2300      	movs	r3, #0
}
 800189a:	0018      	movs	r0, r3
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40021000 	.word	0x40021000

080018a4 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80018ac:	2300      	movs	r3, #0
 80018ae:	60fb      	str	r3, [r7, #12]
    }
  }
#endif /* RCC_CCIPR_USART1SEL  */

#if defined(RCC_CCIPR_USART2SEL)
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2b0c      	cmp	r3, #12
 80018b4:	d13c      	bne.n	8001930 <LL_RCC_GetUSARTClockFreq+0x8c>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	0018      	movs	r0, r3
 80018ba:	f7ff ffad 	bl	8001818 <LL_RCC_GetUSARTClockSource>
 80018be:	0003      	movs	r3, r0
 80018c0:	4a1e      	ldr	r2, [pc, #120]	; (800193c <LL_RCC_GetUSARTClockFreq+0x98>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d01c      	beq.n	8001900 <LL_RCC_GetUSARTClockFreq+0x5c>
 80018c6:	4a1d      	ldr	r2, [pc, #116]	; (800193c <LL_RCC_GetUSARTClockFreq+0x98>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d821      	bhi.n	8001910 <LL_RCC_GetUSARTClockFreq+0x6c>
 80018cc:	4a1c      	ldr	r2, [pc, #112]	; (8001940 <LL_RCC_GetUSARTClockFreq+0x9c>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d003      	beq.n	80018da <LL_RCC_GetUSARTClockFreq+0x36>
 80018d2:	4a1c      	ldr	r2, [pc, #112]	; (8001944 <LL_RCC_GetUSARTClockFreq+0xa0>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d005      	beq.n	80018e4 <LL_RCC_GetUSARTClockFreq+0x40>
 80018d8:	e01a      	b.n	8001910 <LL_RCC_GetUSARTClockFreq+0x6c>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80018da:	f000 f839 	bl	8001950 <RCC_GetSystemClockFreq>
 80018de:	0003      	movs	r3, r0
 80018e0:	60fb      	str	r3, [r7, #12]
        break;
 80018e2:	e025      	b.n	8001930 <LL_RCC_GetUSARTClockFreq+0x8c>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80018e4:	f7ff ff44 	bl	8001770 <LL_RCC_HSI_IsReady>
 80018e8:	1e03      	subs	r3, r0, #0
 80018ea:	d01e      	beq.n	800192a <LL_RCC_GetUSARTClockFreq+0x86>
        {
          if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 80018ec:	f7ff ffca 	bl	8001884 <LL_RCC_IsActiveFlag_HSIDIV>
 80018f0:	1e03      	subs	r3, r0, #0
 80018f2:	d002      	beq.n	80018fa <LL_RCC_GetUSARTClockFreq+0x56>
          {
            usart_frequency = (HSI_VALUE >> 2U);
 80018f4:	4b14      	ldr	r3, [pc, #80]	; (8001948 <LL_RCC_GetUSARTClockFreq+0xa4>)
 80018f6:	60fb      	str	r3, [r7, #12]
          else
          {
            usart_frequency = HSI_VALUE;
          }
        }
        break;
 80018f8:	e017      	b.n	800192a <LL_RCC_GetUSARTClockFreq+0x86>
            usart_frequency = HSI_VALUE;
 80018fa:	4b14      	ldr	r3, [pc, #80]	; (800194c <LL_RCC_GetUSARTClockFreq+0xa8>)
 80018fc:	60fb      	str	r3, [r7, #12]
        break;
 80018fe:	e014      	b.n	800192a <LL_RCC_GetUSARTClockFreq+0x86>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8001900:	f7ff ff46 	bl	8001790 <LL_RCC_LSE_IsReady>
 8001904:	1e03      	subs	r3, r0, #0
 8001906:	d012      	beq.n	800192e <LL_RCC_GetUSARTClockFreq+0x8a>
        {
          usart_frequency = LSE_VALUE;
 8001908:	2380      	movs	r3, #128	; 0x80
 800190a:	021b      	lsls	r3, r3, #8
 800190c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800190e:	e00e      	b.n	800192e <LL_RCC_GetUSARTClockFreq+0x8a>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001910:	f000 f81e 	bl	8001950 <RCC_GetSystemClockFreq>
 8001914:	0003      	movs	r3, r0
 8001916:	0018      	movs	r0, r3
 8001918:	f000 f85e 	bl	80019d8 <RCC_GetHCLKClockFreq>
 800191c:	0003      	movs	r3, r0
 800191e:	0018      	movs	r0, r3
 8001920:	f000 f870 	bl	8001a04 <RCC_GetPCLK1ClockFreq>
 8001924:	0003      	movs	r3, r0
 8001926:	60fb      	str	r3, [r7, #12]
        break;
 8001928:	e002      	b.n	8001930 <LL_RCC_GetUSARTClockFreq+0x8c>
        break;
 800192a:	46c0      	nop			; (mov r8, r8)
 800192c:	e000      	b.n	8001930 <LL_RCC_GetUSARTClockFreq+0x8c>
        break;
 800192e:	46c0      	nop			; (mov r8, r8)
    }
  }
#endif /* RCC_CCIPR_USART2SEL */

  return usart_frequency;
 8001930:	68fb      	ldr	r3, [r7, #12]
}
 8001932:	0018      	movs	r0, r3
 8001934:	46bd      	mov	sp, r7
 8001936:	b004      	add	sp, #16
 8001938:	bd80      	pop	{r7, pc}
 800193a:	46c0      	nop			; (mov r8, r8)
 800193c:	000c000c 	.word	0x000c000c
 8001940:	000c0004 	.word	0x000c0004
 8001944:	000c0008 	.word	0x000c0008
 8001948:	003d0900 	.word	0x003d0900
 800194c:	00f42400 	.word	0x00f42400

08001950 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001956:	f7ff ff3b 	bl	80017d0 <LL_RCC_GetSysClkSource>
 800195a:	0003      	movs	r3, r0
 800195c:	2b0c      	cmp	r3, #12
 800195e:	d020      	beq.n	80019a2 <RCC_GetSystemClockFreq+0x52>
 8001960:	d824      	bhi.n	80019ac <RCC_GetSystemClockFreq+0x5c>
 8001962:	2b08      	cmp	r3, #8
 8001964:	d01a      	beq.n	800199c <RCC_GetSystemClockFreq+0x4c>
 8001966:	d821      	bhi.n	80019ac <RCC_GetSystemClockFreq+0x5c>
 8001968:	2b00      	cmp	r3, #0
 800196a:	d002      	beq.n	8001972 <RCC_GetSystemClockFreq+0x22>
 800196c:	2b04      	cmp	r3, #4
 800196e:	d00b      	beq.n	8001988 <RCC_GetSystemClockFreq+0x38>
 8001970:	e01c      	b.n	80019ac <RCC_GetSystemClockFreq+0x5c>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001972:	f7ff ff21 	bl	80017b8 <LL_RCC_MSI_GetRange>
 8001976:	0003      	movs	r3, r0
 8001978:	0b5b      	lsrs	r3, r3, #13
 800197a:	3301      	adds	r3, #1
 800197c:	2280      	movs	r2, #128	; 0x80
 800197e:	0212      	lsls	r2, r2, #8
 8001980:	409a      	lsls	r2, r3
 8001982:	0013      	movs	r3, r2
 8001984:	607b      	str	r3, [r7, #4]
      break;
 8001986:	e01c      	b.n	80019c2 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8001988:	f7ff ff7c 	bl	8001884 <LL_RCC_IsActiveFlag_HSIDIV>
 800198c:	1e03      	subs	r3, r0, #0
 800198e:	d002      	beq.n	8001996 <RCC_GetSystemClockFreq+0x46>
      {
        frequency = (HSI_VALUE >> 2U);
 8001990:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <RCC_GetSystemClockFreq+0x7c>)
 8001992:	607b      	str	r3, [r7, #4]
      }
      else
      {
        frequency = HSI_VALUE;
      }
      break;
 8001994:	e015      	b.n	80019c2 <RCC_GetSystemClockFreq+0x72>
        frequency = HSI_VALUE;
 8001996:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <RCC_GetSystemClockFreq+0x80>)
 8001998:	607b      	str	r3, [r7, #4]
      break;
 800199a:	e012      	b.n	80019c2 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock source */
      frequency = HSE_VALUE;
 800199c:	4b0d      	ldr	r3, [pc, #52]	; (80019d4 <RCC_GetSystemClockFreq+0x84>)
 800199e:	607b      	str	r3, [r7, #4]
      break;
 80019a0:	e00f      	b.n	80019c2 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80019a2:	f000 f843 	bl	8001a2c <RCC_PLL_GetFreqDomain_SYS>
 80019a6:	0003      	movs	r3, r0
 80019a8:	607b      	str	r3, [r7, #4]
      break;
 80019aa:	e00a      	b.n	80019c2 <RCC_GetSystemClockFreq+0x72>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80019ac:	f7ff ff04 	bl	80017b8 <LL_RCC_MSI_GetRange>
 80019b0:	0003      	movs	r3, r0
 80019b2:	0b5b      	lsrs	r3, r3, #13
 80019b4:	3301      	adds	r3, #1
 80019b6:	2280      	movs	r2, #128	; 0x80
 80019b8:	0212      	lsls	r2, r2, #8
 80019ba:	409a      	lsls	r2, r3
 80019bc:	0013      	movs	r3, r2
 80019be:	607b      	str	r3, [r7, #4]
      break;
 80019c0:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 80019c2:	687b      	ldr	r3, [r7, #4]
}
 80019c4:	0018      	movs	r0, r3
 80019c6:	46bd      	mov	sp, r7
 80019c8:	b002      	add	sp, #8
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	003d0900 	.word	0x003d0900
 80019d0:	00f42400 	.word	0x00f42400
 80019d4:	007a1200 	.word	0x007a1200

080019d8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80019e0:	f7ff ff02 	bl	80017e8 <LL_RCC_GetAHBPrescaler>
 80019e4:	0003      	movs	r3, r0
 80019e6:	091b      	lsrs	r3, r3, #4
 80019e8:	220f      	movs	r2, #15
 80019ea:	4013      	ands	r3, r2
 80019ec:	4a04      	ldr	r2, [pc, #16]	; (8001a00 <RCC_GetHCLKClockFreq+0x28>)
 80019ee:	5cd3      	ldrb	r3, [r2, r3]
 80019f0:	001a      	movs	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	40d3      	lsrs	r3, r2
}
 80019f6:	0018      	movs	r0, r3
 80019f8:	46bd      	mov	sp, r7
 80019fa:	b002      	add	sp, #8
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	46c0      	nop			; (mov r8, r8)
 8001a00:	08002248 	.word	0x08002248

08001a04 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001a0c:	f7ff fef8 	bl	8001800 <LL_RCC_GetAPB1Prescaler>
 8001a10:	0003      	movs	r3, r0
 8001a12:	0a1b      	lsrs	r3, r3, #8
 8001a14:	4a04      	ldr	r2, [pc, #16]	; (8001a28 <RCC_GetPCLK1ClockFreq+0x24>)
 8001a16:	5cd3      	ldrb	r3, [r2, r3]
 8001a18:	001a      	movs	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	40d3      	lsrs	r3, r2
}
 8001a1e:	0018      	movs	r0, r3
 8001a20:	46bd      	mov	sp, r7
 8001a22:	b002      	add	sp, #8
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	46c0      	nop			; (mov r8, r8)
 8001a28:	08002258 	.word	0x08002258

08001a2c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001a2c:	b590      	push	{r4, r7, lr}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001a32:	f7ff ff03 	bl	800183c <LL_RCC_PLL_GetMainSource>
 8001a36:	0003      	movs	r3, r0
 8001a38:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d109      	bne.n	8001a54 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8001a40:	f7ff ff20 	bl	8001884 <LL_RCC_IsActiveFlag_HSIDIV>
 8001a44:	1e03      	subs	r3, r0, #0
 8001a46:	d002      	beq.n	8001a4e <RCC_PLL_GetFreqDomain_SYS+0x22>
      {
        pllinputfreq = (HSI_VALUE >> 2U);
 8001a48:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8001a4a:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSI_VALUE;
      }
      break;
 8001a4c:	e005      	b.n	8001a5a <RCC_PLL_GetFreqDomain_SYS+0x2e>
        pllinputfreq = HSI_VALUE;
 8001a4e:	4b10      	ldr	r3, [pc, #64]	; (8001a90 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8001a50:	607b      	str	r3, [r7, #4]
      break;
 8001a52:	e002      	b.n	8001a5a <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001a54:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 8001a56:	607b      	str	r3, [r7, #4]
      break;
 8001a58:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetDivider());
 8001a5a:	f7ff fefb 	bl	8001854 <LL_RCC_PLL_GetMultiplicator>
 8001a5e:	0003      	movs	r3, r0
 8001a60:	0c9b      	lsrs	r3, r3, #18
 8001a62:	4a0d      	ldr	r2, [pc, #52]	; (8001a98 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8001a64:	5cd3      	ldrb	r3, [r2, r3]
 8001a66:	001a      	movs	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4353      	muls	r3, r2
 8001a6c:	001c      	movs	r4, r3
 8001a6e:	f7ff fefd 	bl	800186c <LL_RCC_PLL_GetDivider>
 8001a72:	0003      	movs	r3, r0
 8001a74:	0d9b      	lsrs	r3, r3, #22
 8001a76:	3301      	adds	r3, #1
 8001a78:	0019      	movs	r1, r3
 8001a7a:	0020      	movs	r0, r4
 8001a7c:	f7fe fb44 	bl	8000108 <__udivsi3>
 8001a80:	0003      	movs	r3, r0
}
 8001a82:	0018      	movs	r0, r3
 8001a84:	46bd      	mov	sp, r7
 8001a86:	b003      	add	sp, #12
 8001a88:	bd90      	pop	{r4, r7, pc}
 8001a8a:	46c0      	nop			; (mov r8, r8)
 8001a8c:	003d0900 	.word	0x003d0900
 8001a90:	00f42400 	.word	0x00f42400
 8001a94:	007a1200 	.word	0x007a1200
 8001a98:	08002260 	.word	0x08002260

08001a9c <LL_SPI_IsEnabled>:
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2240      	movs	r2, #64	; 0x40
 8001aaa:	4013      	ands	r3, r2
 8001aac:	2b40      	cmp	r3, #64	; 0x40
 8001aae:	d101      	bne.n	8001ab4 <LL_SPI_IsEnabled+0x18>
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e000      	b.n	8001ab6 <LL_SPI_IsEnabled+0x1a>
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	b002      	add	sp, #8
 8001abc:	bd80      	pop	{r7, pc}

08001abe <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
 8001ac6:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	001a      	movs	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	611a      	str	r2, [r3, #16]
}
 8001ad2:	46c0      	nop			; (mov r8, r8)
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	b002      	add	sp, #8
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001ae6:	230f      	movs	r3, #15
 8001ae8:	18fb      	adds	r3, r7, r3
 8001aea:	2201      	movs	r2, #1
 8001aec:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	0018      	movs	r0, r3
 8001af2:	f7ff ffd3 	bl	8001a9c <LL_SPI_IsEnabled>
 8001af6:	1e03      	subs	r3, r0, #0
 8001af8:	d13c      	bne.n	8001b74 <LL_SPI_Init+0x98>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a21      	ldr	r2, [pc, #132]	; (8001b84 <LL_SPI_Init+0xa8>)
 8001b00:	401a      	ands	r2, r3
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	6819      	ldr	r1, [r3, #0]
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	4319      	orrs	r1, r3
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	4319      	orrs	r1, r3
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	4319      	orrs	r1, r3
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	4319      	orrs	r1, r3
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	4319      	orrs	r1, r3
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	4319      	orrs	r1, r3
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	4319      	orrs	r1, r3
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	6a1b      	ldr	r3, [r3, #32]
 8001b34:	430b      	orrs	r3, r1
 8001b36:	431a      	orrs	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	2204      	movs	r2, #4
 8001b42:	4393      	bics	r3, r2
 8001b44:	001a      	movs	r2, r3
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	0c1b      	lsrs	r3, r3, #16
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	6a1a      	ldr	r2, [r3, #32]
 8001b56:	2380      	movs	r3, #128	; 0x80
 8001b58:	019b      	lsls	r3, r3, #6
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d106      	bne.n	8001b6c <LL_SPI_Init+0x90>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	0011      	movs	r1, r2
 8001b66:	0018      	movs	r0, r3
 8001b68:	f7ff ffa9 	bl	8001abe <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8001b6c:	230f      	movs	r3, #15
 8001b6e:	18fb      	adds	r3, r7, r3
 8001b70:	2200      	movs	r2, #0
 8001b72:	701a      	strb	r2, [r3, #0]

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2S_SUPPORT */
  return status;
 8001b74:	230f      	movs	r3, #15
 8001b76:	18fb      	adds	r3, r7, r3
 8001b78:	781b      	ldrb	r3, [r3, #0]
}
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	b004      	add	sp, #16
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	46c0      	nop			; (mov r8, r8)
 8001b84:	ffff0040 	.word	0xffff0040

08001b88 <LL_TIM_SetPrescaler>:
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b98:	46c0      	nop			; (mov r8, r8)
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	b002      	add	sp, #8
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <LL_TIM_SetAutoReload>:
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001bb0:	46c0      	nop			; (mov r8, r8)
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	b002      	add	sp, #8
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <LL_TIM_OC_SetCompareCH1>:
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001bc8:	46c0      	nop			; (mov r8, r8)
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	b002      	add	sp, #8
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <LL_TIM_OC_SetCompareCH2>:
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001be0:	46c0      	nop			; (mov r8, r8)
 8001be2:	46bd      	mov	sp, r7
 8001be4:	b002      	add	sp, #8
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <LL_TIM_OC_SetCompareCH3>:
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001bf8:	46c0      	nop			; (mov r8, r8)
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	b002      	add	sp, #8
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <LL_TIM_OC_SetCompareCH4>:
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001c10:	46c0      	nop			; (mov r8, r8)
 8001c12:	46bd      	mov	sp, r7
 8001c14:	b002      	add	sp, #8
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	695b      	ldr	r3, [r3, #20]
 8001c24:	2201      	movs	r2, #1
 8001c26:	431a      	orrs	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	615a      	str	r2, [r3, #20]
}
 8001c2c:	46c0      	nop			; (mov r8, r8)
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	b002      	add	sp, #8
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	2380      	movs	r3, #128	; 0x80
 8001c48:	05db      	lsls	r3, r3, #23
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d003      	beq.n	8001c56 <LL_TIM_Init+0x22>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a1a      	ldr	r2, [pc, #104]	; (8001cbc <LL_TIM_Init+0x88>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d107      	bne.n	8001c66 <LL_TIM_Init+0x32>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2270      	movs	r2, #112	; 0x70
 8001c5a:	4393      	bics	r3, r2
 8001c5c:	001a      	movs	r2, r3
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	2380      	movs	r3, #128	; 0x80
 8001c6a:	05db      	lsls	r3, r3, #23
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d003      	beq.n	8001c78 <LL_TIM_Init+0x44>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a12      	ldr	r2, [pc, #72]	; (8001cbc <LL_TIM_Init+0x88>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d106      	bne.n	8001c86 <LL_TIM_Init+0x52>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	4a11      	ldr	r2, [pc, #68]	; (8001cc0 <LL_TIM_Init+0x8c>)
 8001c7c:	401a      	ands	r2, r3
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	68fa      	ldr	r2, [r7, #12]
 8001c8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	0011      	movs	r1, r2
 8001c94:	0018      	movs	r0, r3
 8001c96:	f7ff ff83 	bl	8001ba0 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	881b      	ldrh	r3, [r3, #0]
 8001c9e:	001a      	movs	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	0011      	movs	r1, r2
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	f7ff ff6f 	bl	8001b88 <LL_TIM_SetPrescaler>
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	0018      	movs	r0, r3
 8001cae:	f7ff ffb3 	bl	8001c18 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	b004      	add	sp, #16
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40010800 	.word	0x40010800
 8001cc0:	fffffcff 	.word	0xfffffcff

08001cc4 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8001cc4:	b590      	push	{r4, r7, lr}
 8001cc6:	b087      	sub	sp, #28
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8001cd0:	2317      	movs	r3, #23
 8001cd2:	18fb      	adds	r3, r7, r3
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	701a      	strb	r2, [r3, #0]

  switch (Channel)
 8001cd8:	68ba      	ldr	r2, [r7, #8]
 8001cda:	2380      	movs	r3, #128	; 0x80
 8001cdc:	015b      	lsls	r3, r3, #5
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d036      	beq.n	8001d50 <LL_TIM_OC_Init+0x8c>
 8001ce2:	68ba      	ldr	r2, [r7, #8]
 8001ce4:	2380      	movs	r3, #128	; 0x80
 8001ce6:	015b      	lsls	r3, r3, #5
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d83c      	bhi.n	8001d66 <LL_TIM_OC_Init+0xa2>
 8001cec:	68ba      	ldr	r2, [r7, #8]
 8001cee:	2380      	movs	r3, #128	; 0x80
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d021      	beq.n	8001d3a <LL_TIM_OC_Init+0x76>
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	2380      	movs	r3, #128	; 0x80
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d832      	bhi.n	8001d66 <LL_TIM_OC_Init+0xa2>
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d003      	beq.n	8001d0e <LL_TIM_OC_Init+0x4a>
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	2b10      	cmp	r3, #16
 8001d0a:	d00b      	beq.n	8001d24 <LL_TIM_OC_Init+0x60>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8001d0c:	e02b      	b.n	8001d66 <LL_TIM_OC_Init+0xa2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8001d0e:	2317      	movs	r3, #23
 8001d10:	18fc      	adds	r4, r7, r3
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	0011      	movs	r1, r2
 8001d18:	0018      	movs	r0, r3
 8001d1a:	f000 f82c 	bl	8001d76 <OC1Config>
 8001d1e:	0003      	movs	r3, r0
 8001d20:	7023      	strb	r3, [r4, #0]
      break;
 8001d22:	e021      	b.n	8001d68 <LL_TIM_OC_Init+0xa4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8001d24:	2317      	movs	r3, #23
 8001d26:	18fc      	adds	r4, r7, r3
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	0011      	movs	r1, r2
 8001d2e:	0018      	movs	r0, r3
 8001d30:	f000 f868 	bl	8001e04 <OC2Config>
 8001d34:	0003      	movs	r3, r0
 8001d36:	7023      	strb	r3, [r4, #0]
      break;
 8001d38:	e016      	b.n	8001d68 <LL_TIM_OC_Init+0xa4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8001d3a:	2317      	movs	r3, #23
 8001d3c:	18fc      	adds	r4, r7, r3
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	0011      	movs	r1, r2
 8001d44:	0018      	movs	r0, r3
 8001d46:	f000 f8a9 	bl	8001e9c <OC3Config>
 8001d4a:	0003      	movs	r3, r0
 8001d4c:	7023      	strb	r3, [r4, #0]
      break;
 8001d4e:	e00b      	b.n	8001d68 <LL_TIM_OC_Init+0xa4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8001d50:	2317      	movs	r3, #23
 8001d52:	18fc      	adds	r4, r7, r3
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	0011      	movs	r1, r2
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	f000 f8e8 	bl	8001f30 <OC4Config>
 8001d60:	0003      	movs	r3, r0
 8001d62:	7023      	strb	r3, [r4, #0]
      break;
 8001d64:	e000      	b.n	8001d68 <LL_TIM_OC_Init+0xa4>
      break;
 8001d66:	46c0      	nop			; (mov r8, r8)
  }

  return result;
 8001d68:	2317      	movs	r3, #23
 8001d6a:	18fb      	adds	r3, r7, r3
 8001d6c:	781b      	ldrb	r3, [r3, #0]
}
 8001d6e:	0018      	movs	r0, r3
 8001d70:	46bd      	mov	sp, r7
 8001d72:	b007      	add	sp, #28
 8001d74:	bd90      	pop	{r4, r7, pc}

08001d76 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b086      	sub	sp, #24
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
 8001d7e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	2201      	movs	r2, #1
 8001d86:	4393      	bics	r3, r2
 8001d88:	001a      	movs	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a1b      	ldr	r3, [r3, #32]
 8001d92:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2203      	movs	r2, #3
 8001da4:	4393      	bics	r3, r2
 8001da6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2270      	movs	r2, #112	; 0x70
 8001dac:	4393      	bics	r3, r2
 8001dae:	001a      	movs	r2, r3
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	2202      	movs	r2, #2
 8001dbc:	4393      	bics	r3, r2
 8001dbe:	001a      	movs	r2, r3
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	4393      	bics	r3, r2
 8001dce:	001a      	movs	r2, r3
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	0011      	movs	r1, r2
 8001dec:	0018      	movs	r0, r3
 8001dee:	f7ff fee3 	bl	8001bb8 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	697a      	ldr	r2, [r7, #20]
 8001df6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	b006      	add	sp, #24
 8001e00:	bd80      	pop	{r7, pc}
	...

08001e04 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a1b      	ldr	r3, [r3, #32]
 8001e12:	2210      	movs	r2, #16
 8001e14:	4393      	bics	r3, r2
 8001e16:	001a      	movs	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	4a18      	ldr	r2, [pc, #96]	; (8001e94 <OC2Config+0x90>)
 8001e32:	4013      	ands	r3, r2
 8001e34:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	4a17      	ldr	r2, [pc, #92]	; (8001e98 <OC2Config+0x94>)
 8001e3a:	401a      	ands	r2, r3
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	021b      	lsls	r3, r3, #8
 8001e42:	4313      	orrs	r3, r2
 8001e44:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	2220      	movs	r2, #32
 8001e4a:	4393      	bics	r3, r2
 8001e4c:	001a      	movs	r2, r3
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	011b      	lsls	r3, r3, #4
 8001e54:	4313      	orrs	r3, r2
 8001e56:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	2210      	movs	r2, #16
 8001e5c:	4393      	bics	r3, r2
 8001e5e:	001a      	movs	r2, r3
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	011b      	lsls	r3, r3, #4
 8001e66:	4313      	orrs	r3, r2
 8001e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	689a      	ldr	r2, [r3, #8]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	0011      	movs	r1, r2
 8001e7e:	0018      	movs	r0, r3
 8001e80:	f7ff fea6 	bl	8001bd0 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	b006      	add	sp, #24
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	fffffcff 	.word	0xfffffcff
 8001e98:	ffff8fff 	.word	0xffff8fff

08001e9c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
 8001eaa:	4a1f      	ldr	r2, [pc, #124]	; (8001f28 <OC3Config+0x8c>)
 8001eac:	401a      	ands	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a1b      	ldr	r3, [r3, #32]
 8001eb6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2203      	movs	r2, #3
 8001ec8:	4393      	bics	r3, r2
 8001eca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2270      	movs	r2, #112	; 0x70
 8001ed0:	4393      	bics	r3, r2
 8001ed2:	001a      	movs	r2, r3
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	4a13      	ldr	r2, [pc, #76]	; (8001f2c <OC3Config+0x90>)
 8001ee0:	401a      	ands	r2, r3
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	021b      	lsls	r3, r3, #8
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	4a0e      	ldr	r2, [pc, #56]	; (8001f28 <OC3Config+0x8c>)
 8001ef0:	401a      	ands	r2, r3
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	021b      	lsls	r3, r3, #8
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	0011      	movs	r1, r2
 8001f10:	0018      	movs	r0, r3
 8001f12:	f7ff fe69 	bl	8001be8 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	697a      	ldr	r2, [r7, #20]
 8001f1a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	0018      	movs	r0, r3
 8001f20:	46bd      	mov	sp, r7
 8001f22:	b006      	add	sp, #24
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	46c0      	nop			; (mov r8, r8)
 8001f28:	fffffeff 	.word	0xfffffeff
 8001f2c:	fffffdff 	.word	0xfffffdff

08001f30 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	4a1f      	ldr	r2, [pc, #124]	; (8001fbc <OC4Config+0x8c>)
 8001f40:	401a      	ands	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	4a19      	ldr	r2, [pc, #100]	; (8001fc0 <OC4Config+0x90>)
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	4a18      	ldr	r2, [pc, #96]	; (8001fc4 <OC4Config+0x94>)
 8001f64:	401a      	ands	r2, r3
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	021b      	lsls	r3, r3, #8
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	4a15      	ldr	r2, [pc, #84]	; (8001fc8 <OC4Config+0x98>)
 8001f74:	401a      	ands	r2, r3
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	031b      	lsls	r3, r3, #12
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	4a0e      	ldr	r2, [pc, #56]	; (8001fbc <OC4Config+0x8c>)
 8001f84:	401a      	ands	r2, r3
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	031b      	lsls	r3, r3, #12
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	0011      	movs	r1, r2
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	f7ff fe2b 	bl	8001c00 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	697a      	ldr	r2, [r7, #20]
 8001fae:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	b006      	add	sp, #24
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	46c0      	nop			; (mov r8, r8)
 8001fbc:	ffffefff 	.word	0xffffefff
 8001fc0:	fffffcff 	.word	0xfffffcff
 8001fc4:	ffff8fff 	.word	0xffff8fff
 8001fc8:	ffffdfff 	.word	0xffffdfff

08001fcc <LL_USART_IsEnabled>:
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	4013      	ands	r3, r2
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d101      	bne.n	8001fe4 <LL_USART_IsEnabled+0x18>
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e000      	b.n	8001fe6 <LL_USART_IsEnabled+0x1a>
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	0018      	movs	r0, r3
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	b002      	add	sp, #8
 8001fec:	bd80      	pop	{r7, pc}
	...

08001ff0 <LL_USART_SetStopBitsLength>:
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	4a05      	ldr	r2, [pc, #20]	; (8002014 <LL_USART_SetStopBitsLength+0x24>)
 8002000:	401a      	ands	r2, r3
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	431a      	orrs	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	605a      	str	r2, [r3, #4]
}
 800200a:	46c0      	nop			; (mov r8, r8)
 800200c:	46bd      	mov	sp, r7
 800200e:	b002      	add	sp, #8
 8002010:	bd80      	pop	{r7, pc}
 8002012:	46c0      	nop			; (mov r8, r8)
 8002014:	ffffcfff 	.word	0xffffcfff

08002018 <LL_USART_SetHWFlowCtrl>:
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	4a05      	ldr	r2, [pc, #20]	; (800203c <LL_USART_SetHWFlowCtrl+0x24>)
 8002028:	401a      	ands	r2, r3
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	431a      	orrs	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	609a      	str	r2, [r3, #8]
}
 8002032:	46c0      	nop			; (mov r8, r8)
 8002034:	46bd      	mov	sp, r7
 8002036:	b002      	add	sp, #8
 8002038:	bd80      	pop	{r7, pc}
 800203a:	46c0      	nop			; (mov r8, r8)
 800203c:	fffffcff 	.word	0xfffffcff

08002040 <LL_USART_SetBaudRate>:
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
 800204c:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	2380      	movs	r3, #128	; 0x80
 8002052:	021b      	lsls	r3, r3, #8
 8002054:	429a      	cmp	r2, r3
 8002056:	d11c      	bne.n	8002092 <LL_USART_SetBaudRate+0x52>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	005a      	lsls	r2, r3, #1
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	085b      	lsrs	r3, r3, #1
 8002060:	18d3      	adds	r3, r2, r3
 8002062:	6839      	ldr	r1, [r7, #0]
 8002064:	0018      	movs	r0, r3
 8002066:	f7fe f84f 	bl	8000108 <__udivsi3>
 800206a:	0003      	movs	r3, r0
 800206c:	b29b      	uxth	r3, r3
 800206e:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	4a10      	ldr	r2, [pc, #64]	; (80020b4 <LL_USART_SetBaudRate+0x74>)
 8002074:	4013      	ands	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	085b      	lsrs	r3, r3, #1
 800207c:	b29b      	uxth	r3, r3
 800207e:	001a      	movs	r2, r3
 8002080:	2307      	movs	r3, #7
 8002082:	4013      	ands	r3, r2
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	4313      	orrs	r3, r2
 8002088:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	60da      	str	r2, [r3, #12]
}
 8002090:	e00c      	b.n	80020ac <LL_USART_SetBaudRate+0x6c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	085a      	lsrs	r2, r3, #1
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	18d3      	adds	r3, r2, r3
 800209a:	6839      	ldr	r1, [r7, #0]
 800209c:	0018      	movs	r0, r3
 800209e:	f7fe f833 	bl	8000108 <__udivsi3>
 80020a2:	0003      	movs	r3, r0
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	001a      	movs	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	60da      	str	r2, [r3, #12]
}
 80020ac:	46c0      	nop			; (mov r8, r8)
 80020ae:	46bd      	mov	sp, r7
 80020b0:	b006      	add	sp, #24
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	0000fff0 	.word	0x0000fff0

080020b8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80020c2:	230f      	movs	r3, #15
 80020c4:	18fb      	adds	r3, r7, r3
 80020c6:	2201      	movs	r2, #1
 80020c8:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80020ca:	2300      	movs	r3, #0
 80020cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	0018      	movs	r0, r3
 80020d2:	f7ff ff7b 	bl	8001fcc <LL_USART_IsEnabled>
 80020d6:	1e03      	subs	r3, r0, #0
 80020d8:	d13b      	bne.n	8002152 <LL_USART_Init+0x9a>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a20      	ldr	r2, [pc, #128]	; (8002160 <LL_USART_Init+0xa8>)
 80020e0:	401a      	ands	r2, r3
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	6859      	ldr	r1, [r3, #4]
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	4319      	orrs	r1, r3
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	4319      	orrs	r1, r3
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	430b      	orrs	r3, r1
 80020f8:	431a      	orrs	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	689a      	ldr	r2, [r3, #8]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	0011      	movs	r1, r2
 8002106:	0018      	movs	r0, r3
 8002108:	f7ff ff72 	bl	8001ff0 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	695a      	ldr	r2, [r3, #20]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	0011      	movs	r1, r2
 8002114:	0018      	movs	r0, r3
 8002116:	f7ff ff7f 	bl	8002018 <LL_USART_SetHWFlowCtrl>
    }
#endif /* USART1 */
#if defined(USART1)
    else if (USARTx == USART2)
#else
    if (USARTx == USART2)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a11      	ldr	r2, [pc, #68]	; (8002164 <LL_USART_Init+0xac>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d104      	bne.n	800212c <LL_USART_Init+0x74>
#endif /* USART1 */
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8002122:	200c      	movs	r0, #12
 8002124:	f7ff fbbe 	bl	80018a4 <LL_RCC_GetUSARTClockFreq>
 8002128:	0003      	movs	r3, r0
 800212a:	60bb      	str	r3, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00f      	beq.n	8002152 <LL_USART_Init+0x9a>
        && (USART_InitStruct->BaudRate != 0U))
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00b      	beq.n	8002152 <LL_USART_Init+0x9a>
    {
      status = SUCCESS;
 800213a:	230f      	movs	r3, #15
 800213c:	18fb      	adds	r3, r7, r3
 800213e:	2200      	movs	r2, #0
 8002140:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800214a:	68b9      	ldr	r1, [r7, #8]
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7ff ff77 	bl	8002040 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002152:	230f      	movs	r3, #15
 8002154:	18fb      	adds	r3, r7, r3
 8002156:	781b      	ldrb	r3, [r3, #0]
}
 8002158:	0018      	movs	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	b004      	add	sp, #16
 800215e:	bd80      	pop	{r7, pc}
 8002160:	efff69f3 	.word	0xefff69f3
 8002164:	40004400 	.word	0x40004400

08002168 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002172:	6839      	ldr	r1, [r7, #0]
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f7fd ffc7 	bl	8000108 <__udivsi3>
 800217a:	0003      	movs	r3, r0
 800217c:	001a      	movs	r2, r3
 800217e:	4b06      	ldr	r3, [pc, #24]	; (8002198 <LL_InitTick+0x30>)
 8002180:	3a01      	subs	r2, #1
 8002182:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002184:	4b04      	ldr	r3, [pc, #16]	; (8002198 <LL_InitTick+0x30>)
 8002186:	2200      	movs	r2, #0
 8002188:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800218a:	4b03      	ldr	r3, [pc, #12]	; (8002198 <LL_InitTick+0x30>)
 800218c:	2205      	movs	r2, #5
 800218e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002190:	46c0      	nop			; (mov r8, r8)
 8002192:	46bd      	mov	sp, r7
 8002194:	b002      	add	sp, #8
 8002196:	bd80      	pop	{r7, pc}
 8002198:	e000e010 	.word	0xe000e010

0800219c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80021a4:	23fa      	movs	r3, #250	; 0xfa
 80021a6:	009a      	lsls	r2, r3, #2
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	0011      	movs	r1, r2
 80021ac:	0018      	movs	r0, r3
 80021ae:	f7ff ffdb 	bl	8002168 <LL_InitTick>
}
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	46bd      	mov	sp, r7
 80021b6:	b002      	add	sp, #8
 80021b8:	bd80      	pop	{r7, pc}
	...

080021bc <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80021c4:	4b03      	ldr	r3, [pc, #12]	; (80021d4 <LL_SetSystemCoreClock+0x18>)
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	601a      	str	r2, [r3, #0]
}
 80021ca:	46c0      	nop			; (mov r8, r8)
 80021cc:	46bd      	mov	sp, r7
 80021ce:	b002      	add	sp, #8
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	20000000 	.word	0x20000000

080021d8 <memset>:
 80021d8:	0003      	movs	r3, r0
 80021da:	1882      	adds	r2, r0, r2
 80021dc:	4293      	cmp	r3, r2
 80021de:	d100      	bne.n	80021e2 <memset+0xa>
 80021e0:	4770      	bx	lr
 80021e2:	7019      	strb	r1, [r3, #0]
 80021e4:	3301      	adds	r3, #1
 80021e6:	e7f9      	b.n	80021dc <memset+0x4>

080021e8 <__libc_init_array>:
 80021e8:	b570      	push	{r4, r5, r6, lr}
 80021ea:	2600      	movs	r6, #0
 80021ec:	4c0c      	ldr	r4, [pc, #48]	; (8002220 <__libc_init_array+0x38>)
 80021ee:	4d0d      	ldr	r5, [pc, #52]	; (8002224 <__libc_init_array+0x3c>)
 80021f0:	1b64      	subs	r4, r4, r5
 80021f2:	10a4      	asrs	r4, r4, #2
 80021f4:	42a6      	cmp	r6, r4
 80021f6:	d109      	bne.n	800220c <__libc_init_array+0x24>
 80021f8:	2600      	movs	r6, #0
 80021fa:	f000 f819 	bl	8002230 <_init>
 80021fe:	4c0a      	ldr	r4, [pc, #40]	; (8002228 <__libc_init_array+0x40>)
 8002200:	4d0a      	ldr	r5, [pc, #40]	; (800222c <__libc_init_array+0x44>)
 8002202:	1b64      	subs	r4, r4, r5
 8002204:	10a4      	asrs	r4, r4, #2
 8002206:	42a6      	cmp	r6, r4
 8002208:	d105      	bne.n	8002216 <__libc_init_array+0x2e>
 800220a:	bd70      	pop	{r4, r5, r6, pc}
 800220c:	00b3      	lsls	r3, r6, #2
 800220e:	58eb      	ldr	r3, [r5, r3]
 8002210:	4798      	blx	r3
 8002212:	3601      	adds	r6, #1
 8002214:	e7ee      	b.n	80021f4 <__libc_init_array+0xc>
 8002216:	00b3      	lsls	r3, r6, #2
 8002218:	58eb      	ldr	r3, [r5, r3]
 800221a:	4798      	blx	r3
 800221c:	3601      	adds	r6, #1
 800221e:	e7f2      	b.n	8002206 <__libc_init_array+0x1e>
 8002220:	0800227c 	.word	0x0800227c
 8002224:	0800227c 	.word	0x0800227c
 8002228:	08002280 	.word	0x08002280
 800222c:	0800227c 	.word	0x0800227c

08002230 <_init>:
 8002230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002232:	46c0      	nop			; (mov r8, r8)
 8002234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002236:	bc08      	pop	{r3}
 8002238:	469e      	mov	lr, r3
 800223a:	4770      	bx	lr

0800223c <_fini>:
 800223c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002242:	bc08      	pop	{r3}
 8002244:	469e      	mov	lr, r3
 8002246:	4770      	bx	lr
